<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端·禁地</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.leungjz.top/"/>
  <updated>2017-07-03T15:26:10.000Z</updated>
  <id>http://blog.leungjz.top/</id>
  
  <author>
    <name>梁生、</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>农民进城之初尝FastDFS搭建图片分布式系统</title>
    <link href="http://blog.leungjz.top/2017/06/09/fastdfs-nginx/"/>
    <id>http://blog.leungjz.top/2017/06/09/fastdfs-nginx/</id>
    <published>2017-06-09T08:19:51.000Z</published>
    <updated>2017-07-03T15:26:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。<br><a id="more"></a><br>于前不久，公司论坛的图片终于将服务器给挤爆了，已经达到了恐怖的34G，服务器总容量才40G。如果直接加硬盘的话，那么discuz中的逻辑几乎就要全改，所以不行。如果将所有图片扔到对象存储的话，那么这会是一大笔支出（虽然钱不是我出），所以还是不行。没办法，只能自己来弄个图片服务器。<br><img src="http://ojrkbauy9.bkt.clouddn.com/1.attachement-storage.png" alt="附件容量"></p>
<h2 id="为什么选择-FastDFS"><a href="#为什么选择-FastDFS" class="headerlink" title="为什么选择 FastDFS"></a>为什么选择 FastDFS</h2><blockquote>
<p>FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，功能包括：文件存储、文件同步、文件访问（文件上传、文件下载）等，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。</p>
</blockquote>
<p>最重要的是：<strong>当存储空间不足或即将耗尽时，可以动态添加卷。只需要增加一台或多台服务器，并将它们配置为一个新的卷，这样就扩大了存储系统的容量。</strong>这样的话，如果服务器上挂的硬盘满了，只需要添加硬盘，再修改一下配置即可继续使用。</p>
<h2 id="安装-FastDFS"><a href="#安装-FastDFS" class="headerlink" title="安装 FastDFS"></a>安装 FastDFS</h2><ol>
<li><p>下载并安装 FastDFS 依赖包 libfastcommon<br>下载可以到 <a href="https://github.com/happyfish100/libfastcommon/archive/master.zip" target="_blank" rel="external">这里</a> 直接下载再 scp 复制到服务器上。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/leung<span class="comment"># unzip libfastcommon-master.zip</span></div><div class="line">root@ubuntu:/home/leung<span class="comment"># cd libfastcommon-master</span></div><div class="line">root@ubuntu:/home/leung<span class="comment"># ./make.sh</span></div><div class="line">root@ubuntu:/home/leung<span class="comment"># ./make.sh install</span></div></pre></td></tr></table></figure>
<p>安装完成如下图：<br><img src="http://ojrkbauy9.bkt.clouddn.com/2.lib-install.png" alt="安装依赖完成"></p>
</li>
<li><p>下载并安装FastDFS<br>下载可以到 <a href="https://nchc.dl.sourceforge.net/project/fastdfs/FastDFS%20Server%20Source%20Code/FastDFS%20Server%20with%20PHP%20Extension%20Source%20Code%20V5.08/FastDFS_v5.08.tar.gz" target="_blank" rel="external">这里</a> 直接下载再 scp 复制到服务器上。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/leung# tar -xf FastDFS_v5.08.tar_2.gz</div><div class="line">root@ubuntu:/home/leung# cd FastDFS</div><div class="line">root@ubuntu:/home/leung# ./make.sh</div><div class="line">root@ubuntu:/home/leung# ./make.sh install</div></pre></td></tr></table></figure>
<p>查看是否有 fdfs 的命令可用：<br><img src="http://ojrkbauy9.bkt.clouddn.com/3.fdfs-install.png" alt="查看所有 fdfs 的命令"></p>
</li>
<li><p>配置跟踪服务器（tracker server）<br>先将 fdfs 的默认配置复制到 fdfs 的配置路径中： <code>/etc/fdfs</code><br><img src="http://ojrkbauy9.bkt.clouddn.com/4.tracker-conf.png" alt="配置文件"></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/leung/FastDFS<span class="comment"># cp -r conf/* /etc/fdfs/</span></div><div class="line">root@ubuntu:/home/leung/FastDFS<span class="comment"># ls /etc/fdfs/</span></div><div class="line">anti-steal.jpg  http.conf   storage.conf      tracker.conf</div><div class="line">client.conf     mime.types  storage_ids.conf</div></pre></td></tr></table></figure>
<p>修改 tracker 的配置文件, <code>tracker.conf</code>.其中最基本的修改配置为：</p>
<p><code>bind_addr</code>: 修改为 <code>YOUR_SERVER_IP</code> ，我这里设置为虚拟机的IP: <code>192.168.0.144</code></p>
<p><code>base_path</code>: 修改为自定义的存储路径，我这里为 <code>/data/fastdfs/tracker</code></p>
<p>保存退出。</p>
<p>新建 tracker 文件夹： <code>mkdir -p /data/fastdfs/tracker</code></p>
<p>尝试启动 tracker ： （22122 为tracker默认监听端口）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/etc/fdfs<span class="comment"># fdfs_trackerd /etc/fdfs/tracker.conf</span></div><div class="line">root@ubuntu:/etc/fdfs<span class="comment"># ss -lntup | grep 22122</span></div><div class="line">tcp    LISTEN     0      128    192.168.0.144:22122                 *:*                   users:((<span class="string">"fdfs_trackerd"</span>,pid=82767,fd=5))</div></pre></td></tr></table></figure>
<p>看到tracker已经在监听22122端口，说明启动成功。</p>
</li>
<li><p>配置存储服务器（storage server）<br>修改 storage 的配置文件<code>storage.conf</code>。其中最基本的修改配置为：</p>
<p><code>bind_addr</code>: 修改为 <code>YOUR_SERVER_IP</code> ，我这里设置为虚拟机的IP: <code>192.168.0.144</code></p>
<p><code>base_path</code>: 修改为自定义的存储路径，我这里为 <code>/data/fastdfs/storage</code></p>
<p><code>storage_path0</code>: 修改为自定义的存储路径，我这里为 <code>/data/fastdfs/storage</code></p>
<p><code>tracker_server</code>: 修改为你的 tracker 监听的ip和端口号，我这里为 <code>192.168.0.144:22122</code></p>
<p><code>http.server_port</code>: 修改为你的 Nginx 监听的端口号，我这里是80端口</p>
<p>保存退出。</p>
<p>新建 storage 文件夹： <code>mkdir -p /data/fastdfs/storage</code></p>
<p>尝试启动 storage ： （23000 为tracker默认监听端口）</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/etc/fdfs<span class="comment"># fdfs_storaged /etc/fdfs/storage.conf</span></div><div class="line">root@ubuntu:/etc/fdfs<span class="comment"># ss -lntup | grep 23000</span></div><div class="line">tcp    LISTEN     0      128    192.168.0.144:23000                 *:*                   users:((<span class="string">"fdfs_storaged"</span>,pid=82800,fd=5))</div></pre></td></tr></table></figure>
<p>看到storage已经在监听23000端口，说明启动成功。</p>
</li>
<li><p>文件上传测试<br>基本配置完成之后，需要上传个文件测试看是否真的可用。</p>
<p>修改 client.conf :</p>
<p><code>base_path</code>: 修改为tracker的路径，我这里为 <code>/data/fastdfs/tracker</code></p>
<p><code>tracker_server</code>: 修改为你的 tracker 监听的ip和端口号，我这里为 <code>192.168.0.144:22122</code></p>
<p>保存退出。</p>
<p>使用 fdfs_upload_file 测试上传是否成功：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/leung<span class="comment"># fdfs_upload_file /etc/fdfs/client.conf /home/leung/gal_gadot.jpg</span></div><div class="line">group1/M00/00/00/wKgAkFk3zbeANnOvAAODyc0cLwA944.jpg</div><div class="line">root@ubuntu:/home/leung<span class="comment">#</span></div></pre></td></tr></table></figure>
<p>看到返回来了一个 file_id （看上去像是文件路径，在 fdfs系统中称之为 file_id ）表明上传图片成功，该 tracker 和 storage 均是可用的。</p>
</li>
</ol>
<h2 id="在-Nginx-上使用-FastDFS"><a href="#在-Nginx-上使用-FastDFS" class="headerlink" title="在 Nginx 上使用 FastDFS"></a>在 Nginx 上使用 FastDFS</h2><p>现在图片是传上去了，但是怎么能查看到呢？</p>
<p>这时候需要配置 Nginx 了。（Apache没试过）</p>
<p>先下载 Nginx 的 fdfs 模块，并修改模块配置文件（这里有个坑，不修改的话，可能在安装的时候报错）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/leung/<span class="comment"># wget https://nchc.dl.sourceforge.net/project/fastdfs/FastDFS%20Nginx%20Module%20Source%20Code/fastdfs-nginx-module_v1.16.tar.gz</span></div><div class="line">root@ubuntu:/home/leung/<span class="comment"># tar xf fastdfs-nginx-module_v1.16.tar.gz</span></div><div class="line">root@ubuntu:/home/leung/<span class="comment"># cd fastdfs-nginx-module/src/</span></div><div class="line">root@ubuntu:/home/leung/fastdfs-nginx-module/src/<span class="comment"># vim config</span></div><div class="line">// 进入编辑后，直接输入 `:%s+/usr/<span class="built_in">local</span>/+/usr/+g` 包括 `:` ，替换全文的 `/usr/<span class="built_in">local</span>` 配置路径，保存退出</div></pre></td></tr></table></figure></p>
<p>拷贝fastdfs-nginx-module模块中配置文件到/etc/fdfs目录中并编辑：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/leung/fastdfs-nginx-module/src<span class="comment"># cp mod_fastdfs.conf /etc/fdfs/</span></div><div class="line">root@ubuntu:/home/leung/fastdfs-nginx-module/src<span class="comment"># cd /etc/fdfs/</span></div><div class="line">root@ubuntu:/etc/fdfs<span class="comment"># vi mod_fastdfs.conf</span></div></pre></td></tr></table></figure></p>
<p>修改配置项：</p>
<p><code>connect_timeout</code>: 连接超时时间，我这里设置为 10 秒</p>
<p><code>base_path</code>: 路径，我这里没动，默认为/tmp</p>
<p><code>tracker_server</code>：服务器tracker 的监听ip和端口，我这里设置为 <code>192.168.0.144:22122</code></p>
<p><code>storage_server_port</code>：storage 监听端口，我这里是默认的 23000</p>
<p><code>url_have_group_name</code>：url是否带上 group_name，这里最好设置为true，要不待会 Nginx 会报400的错误</p>
<p><code>store_path0</code>：修改为storage的存储路径，我这里为 <code>/data/fastdfs/storage</code></p>
<p><code>group_name</code>：设置为默认group1即可。</p>
<p>编辑完毕，保存退出。</p>
<p>安装 Nginx 依赖库：</p>
<p>For Ubuntu: <code>apt-get install libpcre3 libpcre3-dev zlib1g-dev openssl libssl-dev -y</code></p>
<p>For CentOS: <code>yum install -y pcre-devel zlib-devel</code></p>
<p>因为虚拟机刚刚安装，所以先安装 Nginx。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@ubuntu:/home/leung<span class="comment"># wget https://nginx.org/download/nginx-1.13.1.tar.gz</span></div><div class="line">root@ubuntu:/home/leung<span class="comment"># ls</span></div><div class="line">FastDFS  FastDFS_v5.08.tar_2.gz  gal_gadot.jpg  libfastcommon-master  libfastcommon-master.zip  nginx-1.13.1.tar.gz</div><div class="line">root@ubuntu:/home/leung<span class="comment"># tar -xf nginx-1.13.1.tar.gz</span></div><div class="line">root@ubuntu:/home/leung<span class="comment"># cd nginx-1.13.1</span></div><div class="line">root@ubuntu:/home/leung/nginx-1.13.1<span class="comment"># ls</span></div><div class="line">auto  CHANGES  CHANGES.ru  conf  configure  contrib  html  LICENSE  man  README  src</div><div class="line">root@ubuntu:/home/leung/nginx-1.13.1<span class="comment"># ./configure --prefix=/usr/local/nginx/  --with-http_stub_status_module --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-ipv6 --with-http_sub_module --add-module=/home/leung/fastdfs-nginx-module/src/</span></div><div class="line">root@ubuntu:/home/leung/nginx-1.13.1<span class="comment"># make &amp;&amp; make install</span></div></pre></td></tr></table></figure></p>
<p><strong>注意，如果不是新安装的 nginx，请先执行 <code>nginx -V</code> 查看当前nginx已安装的模块，再加上 fdfs 的模块。并且，覆盖安装的话请不要 <code>make install</code> ，具体看下面的操作</strong></p>
<p>如果已经安装过Nginx的话，只需要加上新模块重新编译即可。</p>
<p>先执行 <code>nginx -V</code> 查看当前nginx已安装的模块，如下图，我的服务器之前使用 apt 安装的，所以安装的模块有点多：<br><img src="http://ojrkbauy9.bkt.clouddn.com/5.nginx-install.png" alt="Nginx配置"></p>
<p>把 <code>configure arguments:</code> 后的参数拷贝下载，放在 <code>./configure</code> 后面，再加上 <code>--add-module=/home/leung/fastdfs-nginx-module/src/</code> 即可，add-module后的路径请根据实际情况进行替换.<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">./configure --prefix=/etc/nginx --sbin-path=/usr/sbin/nginx --modules-path=/usr/lib/nginx/modules --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/<span class="built_in">log</span>/nginx/error.log --http-log-path=/var/<span class="built_in">log</span>/nginx/access.log --pid-path=/var/run/nginx.pid --lock-path=/var/run/nginx.lock --http-client-body-temp-path=/var/cache/nginx/client_temp --http-proxy-temp-path=/var/cache/nginx/proxy_temp --http-fastcgi-temp-path=/var/cache/nginx/fastcgi_temp --http-uwsgi-temp-path=/var/cache/nginx/uwsgi_temp --http-scgi-temp-path=/var/cache/nginx/scgi_temp --user=nginx --group=nginx --with-file-aio --with-threads --with-ipv6 --with-http_addition_module --with-http_auth_request_module --with-http_dav_module --with-http_flv_module --with-http_gunzip_module --with-http_gzip_static_module --with-http_mp4_module --with-http_random_index_module --with-http_realip_module --with-http_secure_link_module --with-http_slice_module --with-http_ssl_module --with-http_stub_status_module --with-http_sub_module --with-http_v2_module --with-mail --with-mail_ssl_module --with-stream --with-stream_ssl_module --with-cc-opt=<span class="string">'-g -O2 -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -Wp,-D_FORTIFY_SOURCE=2'</span> --with-ld-opt=<span class="string">'-Wl,-Bsymbolic-functions -Wl,-z,relro -Wl,-z,now -Wl,--as-needed'</span> --add-module=/home/leung/fdfs/fastdfs-nginx-module/src/</div></pre></td></tr></table></figure></p>
<p><strong>完毕后只执行 <code>make</code>，不要执行 <code>make install</code></strong><br>先将原来的nginx 执行文件备份：我这里的执行路径为上述的 <code>/usr/sbin/nginx</code> ，大家替换成真实的路径。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@localhost:~<span class="comment"># mv /usr/sbin/nginx /usr/sbin/nginx-bak</span></div><div class="line">root@localhost:/home/leung/fdfs/nginx-1.13.1<span class="comment"># cp objs/nginx /usr/sbin/nginx</span></div><div class="line">root@localhost:/home/leung/fdfs/nginx-1.13.1<span class="comment"># nginx -v</span></div><div class="line">nginx version: nginx/1.13.1</div><div class="line">root@localhost:/home/leung/fdfs/nginx-1.13.1<span class="comment"># nginx -V</span></div></pre></td></tr></table></figure></p>
<p>可以看到已经加上 fdfs 的模块了，这时候就可以平滑升级 nginx：<br><img src="http://ojrkbauy9.bkt.clouddn.com/5.nginx-version.png" alt="新版nginx配置"><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">root@localhost:/home/leung/fdfs/nginx-1.13.1<span class="comment"># make upgrade</span></div><div class="line">/usr/sbin/nginx -t</div><div class="line">nginx: the configuration file /etc/nginx/nginx.conf syntax is ok</div><div class="line">nginx: configuration file /etc/nginx/nginx.conf <span class="built_in">test</span> is successful</div><div class="line"><span class="built_in">kill</span> -USR2 `cat /var/run/nginx.pid`</div><div class="line">sleep 1</div><div class="line"><span class="built_in">test</span> -f /var/run/nginx.pid.oldbin</div><div class="line"><span class="built_in">kill</span> -QUIT `cat /var/run/nginx.pid.oldbin`</div><div class="line">root@localhost:/home/leung/fdfs/nginx-1.13.1<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>Nginx 的升级/安装到这里就完成了。</p>
<p>在 Nginx 配置文件中加入一句：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">location /group[0-9]/ &#123;</div><div class="line">    ngx_fastdfs_module;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>重启 Nginx ，访问你的网站，就可以看到图片了。<br><img src="http://ojrkbauy9.bkt.clouddn.com/6-result.png" alt="访问图片"></p>
<h2 id="PHP与FDFS的交集"><a href="#PHP与FDFS的交集" class="headerlink" title="PHP与FDFS的交集"></a>PHP与FDFS的交集</h2><p>一个简易的服务器终于跑起来了，能正常上传和下载。但是，总不可能每次上传图片都要用命令行吧，这样既不安全，又麻烦。还是PHP大法好。</p>
<p>PHP要支持fdfs的话，就需要安装 php 的 fdfs 拓展。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">root@localhost:~<span class="comment"># cd /home/leung/fdfs/FastDFS/php_client</span></div><div class="line">root@localhost:/home/leung/fdfs/FastDFS/php_client<span class="comment"># phpize</span></div><div class="line">root@localhost:/home/leung/fdfs/FastDFS/php_client<span class="comment"># ./configure --with-php-config=/usr/local/php5/bin/php-config</span></div><div class="line">root@localhost:/home/leung/fdfs/FastDFS/php_client<span class="comment"># make &amp;&amp; make install</span></div><div class="line">root@localhost:/home/leung/fdfs/FastDFS/php_client<span class="comment"># cat fastdfs_client.ini &gt;&gt; /usr/local/php5/etc/php.ini</span></div></pre></td></tr></table></figure></p>
<p>其中， <code>--with-php-config</code> 后面接的是你的 <code>php-config</code> 的路径，不知道的直接 <code>./configure</code> 试试（我的是 apt 安装的直接 <code>configure</code> 就可以了）</p>
<p>运行 <code>php -m | grep fastdfs</code> 查看是否安装模块成功<br><img src="http://ojrkbauy9.bkt.clouddn.com/7.php-install-module.png" alt="安装模块成功"><br>重启 php-fpm : <code>service php-fpm restart</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@localhost:/etc/php/7.0/fpm<span class="comment"># cat /run/php/php7.0-fpm.pid</span></div><div class="line">17904</div><div class="line">root@localhost:/etc/php/7.0/fpm<span class="comment"># kill -USR2 17904</span></div></pre></td></tr></table></figure></p>
<h2 id="测试PHP上传图片"><a href="#测试PHP上传图片" class="headerlink" title="测试PHP上传图片"></a>测试PHP上传图片</h2><p>新建php文件：<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;?php</span></div><div class="line">$fileId = fastdfs_storage_upload_by_filename1(<span class="string">'/home/leung/test.jpg'</span>, <span class="string">'jpg'</span>);</div><div class="line"><span class="keyword">echo</span> $fileId;</div></pre></td></tr></table></figure></p>
<p>运行php文件：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">root@localhost:/home/leung<span class="comment"># php fdfs.php</span></div><div class="line">group1/M00/00/02/eBmZrlk6cU-AY-cLAAQ9NyZsxTs546.jpg</div><div class="line">root@localhost:/home/leung<span class="comment">#</span></div></pre></td></tr></table></figure></p>
<p>可见，该函数直接返回了一个 fileId 。即为上传图片成功：<br><img src="http://ojrkbauy9.bkt.clouddn.com/8.php-upload%20.png" alt="成功上传图片"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;FastDFS是一个开源的轻量级分布式文件系统，它对文件进行管理，解决了大容量存储和负载均衡的问题。特别适合以文件为载体的在线服务，如相册网站、视频网站等等。&lt;br&gt;
    
    </summary>
    
    
      <category term="nginx" scheme="http://blog.leungjz.top/tags/nginx/"/>
    
      <category term="fastdfs" scheme="http://blog.leungjz.top/tags/fastdfs/"/>
    
      <category term="fdfs" scheme="http://blog.leungjz.top/tags/fdfs/"/>
    
  </entry>
  
  <entry>
    <title>支付开发填坑记之支付宝</title>
    <link href="http://blog.leungjz.top/2017/05/10/payment-alipay/"/>
    <id>http://blog.leungjz.top/2017/05/10/payment-alipay/</id>
    <published>2017-05-10T09:07:58.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要针对在APP应用和网页版的支付功能（支付宝，微信，银联）开发时，所遇到的坑。能填则填。<br><a id="more"></a></p>
<p>支付宝在所有支付方式中最好开发的了，因为文档比较清晰，而且开发起来也比较简单。因此，支付宝的坑是相对较少的。</p>
<h1 id="APP支付"><a href="#APP支付" class="headerlink" title="APP支付"></a>APP支付</h1><p>APP支付步骤为：</p>
<ol>
<li>获取支付宝的配置信息。</li>
<li>生成商家订单信息。</li>
<li>根据订单信息生成<strong>待校验数据</strong>。</li>
<li>生成请求给支付宝的<strong>加密字符串</strong>。</li>
<li>将待校验数据和加密字符串拼接，返回给APP。</li>
<li>APP将得到的数据请求支付宝客户端进行支付。</li>
</ol>
<p>由于APP支付是由APP去调起支付宝支付，所以服务端需要做的事情就是将请求参数封装好之后返回APP即可。</p>
<ol>
<li>获取支付宝的配置信息。<br>支付时需要的配置信息有：<ul>
<li>key： 交易安全校验码。</li>
<li>app_id：支付宝分配给开发者的应用ID。</li>
</ul>
</li>
<li>生成商家订单信息。<br>这个步骤由商家自行生成。支付宝那边只需要知道的订单信息为：<ul>
<li>subject: 必填。商品的标题/交易标题/订单标题/订单关键字等。</li>
<li>total_amount: 必填。订单价格。</li>
<li>out_trade_no: 必填。商户网站唯一订单号。</li>
<li>body: 非必填。交易的具体描述信息。</li>
</ul>
</li>
<li>根据订单信息生成<strong>待校验数据</strong>。<br>APP支付的详细请求参数: <a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.W1CdRr&amp;treeId=204&amp;articleId=105465&amp;docType=1" target="_blank" rel="external">点击查看</a><br><img src="http://ojrkbauy9.bkt.clouddn.com/alipay-app-1.png" alt="APP-支付宝"></li>
<li><p>生成请求给支付宝的<strong>加密字符串</strong>。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sign = $alipaySubmit-&gt;buildRequestParaForApp($para_token);</div></pre></td></tr></table></figure>
<p>其中， <code>buildRequestParaForApp</code> 的实现为：</p>
<ol>
<li><p>对待签名参数数组排序</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 对数组排序</div><div class="line"> * <span class="doctag">@param</span> $para 排序前的数组</div><div class="line"> * return 排序后的数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">argSort</span><span class="params">($para)</span> </span>&#123;</div><div class="line">    ksort($para);</div><div class="line">    reset($para);</div><div class="line">    <span class="keyword">return</span> $para;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>生成签名结果（阿里推荐的是RSA2的签名方式，这里项目用的是RSA）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * RSA签名</div><div class="line"> * <span class="doctag">@param</span> $data 待签名数据</div><div class="line"> * <span class="doctag">@param</span> $private_key_path 商户私钥文件路径</div><div class="line"> * return 签名结果</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">rsaSign</span><span class="params">($data, $private_key_path)</span> </span>&#123;</div><div class="line">    $priKey = file_get_contents($private_key_path);</div><div class="line">    $res = openssl_get_privatekey($priKey);</div><div class="line">    openssl_sign($data, $sign, $res);</div><div class="line">    openssl_free_key($res);</div><div class="line">    <span class="comment">//base64编码</span></div><div class="line">    $sign = base64_encode($sign);</div><div class="line">    <span class="keyword">return</span> $sign;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
</ol>
<ol>
<li><p>将待校验数据和加密字符串拼接，返回给APP。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$url = <span class="string">""</span>;</div><div class="line"><span class="keyword">foreach</span> ($para_token <span class="keyword">as</span> $key =&gt; $value) &#123;</div><div class="line">    $url .= $key.<span class="string">"="</span>.urlencode($value).<span class="string">"&amp;"</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">return</span> $url.<span class="string">"sign="</span>.urlencode($sign);</div></pre></td></tr></table></figure>
</li>
<li><p>APP将得到的数据请求支付宝客户端进行支付。<br>APP端将拼接好的字符串拿去请求支付宝客户端即可调起支付宝进行支付。拼接好的字符串大致如下图所示：<br><img src="http://ojrkbauy9.bkt.clouddn.com/alipay-app-2.png" alt="APP-支付宝-APP"></p>
</li>
</ol>
<h1 id="网页版支付"><a href="#网页版支付" class="headerlink" title="网页版支付"></a>网页版支付</h1><p>网页版支付步骤为：</p>
<ol>
<li>设置支付宝的配置信息。</li>
<li>向支付宝申请新订单，获取支付token。</li>
<li>携带token进行订单支付。</li>
</ol>
<p>网页版的支付宝支付相对于APP调起支付宝要复杂，因为网页支付时，需要多次请求支付宝服务器获取支付的必要参数。</p>
<ol>
<li><p>设置支付宝配置信息。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**调用授权接口alipay.wap.trade.create.direct获取授权码token**/</span></div><div class="line">        </div><div class="line">    <span class="comment">//返回格式</span></div><div class="line">    <span class="keyword">private</span>  $format = <span class="string">""</span>;</div><div class="line">    <span class="comment">//必填，不需要修改</span></div><div class="line">    </div><div class="line">    <span class="comment">//版本</span></div><div class="line">    <span class="keyword">private</span> $v = <span class="string">""</span>;</div><div class="line">    <span class="comment">//必填，不需要修改</span></div><div class="line">    </div><div class="line">    <span class="comment">//请求号</span></div><div class="line">    <span class="keyword">private</span> $req_id = <span class="string">""</span>;</div><div class="line">    <span class="comment">//必填，须保证每次请求都是唯一</span></div><div class="line">    </div><div class="line">    <span class="comment">//**req_data详细信息**</span></div><div class="line">    </div><div class="line">    <span class="comment">//服务器异步通知页面路径</span></div><div class="line">    <span class="keyword">private</span> $notify_url = <span class="string">""</span>;</div><div class="line">    <span class="comment">//需http://格式的完整路径，不允许加?id=123这类自定义参数</span></div><div class="line">    </div><div class="line">    <span class="comment">//页面跳转同步通知页面路径</span></div><div class="line">    <span class="keyword">private</span> $call_back_url = <span class="string">""</span>;</div><div class="line">    <span class="comment">//需http://格式的完整路径，不允许加?id=123这类自定义参数</span></div><div class="line">    </div><div class="line">    <span class="comment">//卖家支付宝账户</span></div><div class="line">    <span class="keyword">private</span> $seller_email = <span class="string">""</span>;</div><div class="line">    <span class="comment">//必填</span></div><div class="line">    </div><div class="line">    <span class="comment">//商户订单号</span></div><div class="line">    <span class="keyword">private</span> $out_trade_no = <span class="string">""</span>;</div><div class="line">    <span class="comment">//商户网站订单系统中唯一订单号，必填</span></div><div class="line">    </div><div class="line">    <span class="comment">//订单名称</span></div><div class="line">    <span class="keyword">private</span> $subject = <span class="string">""</span>;</div><div class="line">    <span class="comment">//必填</span></div><div class="line">    </div><div class="line">    <span class="comment">//付款金额</span></div><div class="line">    <span class="keyword">private</span> $total_fee = <span class="string">""</span>;</div><div class="line">    <span class="comment">//必填</span></div><div class="line">    </div><div class="line">    <span class="comment">//请求业务参数详细</span></div><div class="line">    <span class="keyword">private</span> $req_data = <span class="string">""</span>;</div><div class="line">    <span class="comment">//必填</span></div><div class="line">    </div><div class="line">    <span class="comment">//配置</span></div><div class="line">    <span class="keyword">private</span> $alipay_config = <span class="keyword">array</span>();</div><div class="line">    </div><div class="line"><span class="comment">/************************************************************/</span></div></pre></td></tr></table></figure>
</li>
<li><p>向支付宝申请新订单，并获取订单的token。<br><img src="http://ojrkbauy9.bkt.clouddn.com/alipay-web-1.png" alt="请求订单token需要的req_data"></p>
<p>请求token的service为： <code>alipay.wap.trade.create.direct</code>。</p>
<ol>
<li><p>构造参数：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$para_token = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"service"</span> =&gt; <span class="string">"alipay.wap.trade.create.direct"</span>,</div><div class="line">    <span class="comment">//  合作者身份(partner ID)</span></div><div class="line">    <span class="string">"partner"</span> =&gt; trim(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'partner'</span>]),</div><div class="line">    <span class="comment">//  APP使用的是RSA，网页版使用的是MD5</span></div><div class="line">    <span class="string">"sec_id"</span> =&gt; trim(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'sign_type'</span>]),</div><div class="line">    <span class="comment">//  返回的数据格式</span></div><div class="line">    <span class="string">"format"</span>    =&gt; <span class="keyword">$this</span>-&gt;format,</div><div class="line">    <span class="comment">//  版本号？</span></div><div class="line">    <span class="string">"v"</span> =&gt; <span class="keyword">$this</span>-&gt;v,</div><div class="line">    <span class="comment">//  唯一的请求号</span></div><div class="line">    <span class="string">"req_id"</span>    =&gt; <span class="keyword">$this</span>-&gt;req_id,</div><div class="line">    <span class="comment">//  请求参数</span></div><div class="line">    <span class="string">"req_data"</span>  =&gt; $req_data,</div><div class="line">    <span class="comment">//  字符集，一般为utf8即可。</span></div><div class="line">    <span class="string">"_input_charset"</span>    =&gt; trim(strtolower(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'input_charset'</span>]))</div><div class="line">);</div></pre></td></tr></table></figure>
</li>
<li><p>将构造好的请求参数，进行处理，字典排序，拼接字符串，签名：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">$para_filter = paraFilter($para_temp);</div><div class="line">$para_sort = argSort($para_filter);</div><div class="line">$mysign = <span class="keyword">$this</span>-&gt;buildRequestMysign($para_sort);</div><div class="line"><span class="comment">//签名结果与签名方式加入请求提交参数组中</span></div><div class="line">$para_sort[<span class="string">'sign'</span>] = $mysign;</div><div class="line"><span class="keyword">return</span> $para_sort;</div></pre></td></tr></table></figure>
<p>处理：过滤值为空的数据，过滤签名类型和签名。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">paraFilter</span><span class="params">($para)</span> </span>&#123;</div><div class="line">    $para_filter = <span class="keyword">array</span>();</div><div class="line">    <span class="keyword">while</span> (<span class="keyword">list</span> ($key, $val) = each ($para)) &#123;</div><div class="line">        <span class="keyword">if</span>($key == <span class="string">"sign"</span> || $key == <span class="string">"sign_type"</span> || $val == <span class="string">""</span>)<span class="keyword">continue</span>;</div><div class="line">        <span class="keyword">else</span>    $para_filter[$key] = $para[$key];</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> $para_filter;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>字典排序：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 对数组排序</div><div class="line"> * <span class="doctag">@param</span> $para 排序前的数组</div><div class="line"> * return 排序后的数组</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">argSort</span><span class="params">($para)</span> </span>&#123;</div><div class="line">    ksort($para);</div><div class="line">    reset($para);</div><div class="line">    <span class="keyword">return</span> $para;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>签名：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 生成签名结果</div><div class="line"> * <span class="doctag">@param</span> $para_sort 已排序要签名的数组</div><div class="line"> * return 签名结果字符串</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildRequestMysign</span><span class="params">($para_sort)</span> </span>&#123;</div><div class="line">    <span class="comment">//把数组所有元素，按照“参数=参数值”的模式用“&amp;”字符拼接成字符串</span></div><div class="line">    $prestr = createLinkstring($para_sort);</div><div class="line">    $mysign = <span class="string">""</span>;</div><div class="line">    <span class="keyword">switch</span> (strtoupper(trim(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'sign_type'</span>]))) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"MD5"</span> :</div><div class="line">            <span class="comment">//  MD5直接将密钥拼接在字符串后面再进行MD5加密。</span></div><div class="line">            $mysign = md5Sign($prestr, <span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'key'</span>]);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"RSA"</span> :</div><div class="line">            <span class="comment">//  RSA则是先读取商户的私钥，再用该密钥对字符串进行加密。</span></div><div class="line">            $mysign = rsaSign($prestr, <span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'private_key_path'</span>]);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"0001"</span> :</div><div class="line">            $mysign = rsaSign($prestr, <span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'private_key_path'</span>]);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span> :</div><div class="line">            $mysign = <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $mysign;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>用构造好的参数请求支付宝后台申请新订单：</p>
<p><strong>注意：请求时，必须带上SSL证书。</strong></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sResult = getHttpResponsePOST(<span class="keyword">$this</span>-&gt;alipay_gateway_new, <span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'cacert'</span>],$request_data,trim(strtolower(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'input_charset'</span>])));</div></pre></td></tr></table></figure>
<p>请求函数的实现：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 远程获取数据，POST模式</div><div class="line"> * 注意：</div><div class="line"> * 1.使用Crul需要修改服务器中php.ini文件的设置，找到php_curl.dll去掉前面的";"就行了</div><div class="line"> * 2.文件夹中cacert.pem是SSL证书请保证其路径有效，目前默认路径是：getcwd().'\\cacert.pem'</div><div class="line"> * <span class="doctag">@param</span> $url 指定URL完整路径地址</div><div class="line"> * <span class="doctag">@param</span> $cacert_url 指定当前工作目录绝对路径</div><div class="line"> * <span class="doctag">@param</span> $para 请求的数据</div><div class="line"> * <span class="doctag">@param</span> $input_charset 编码格式。默认值：空值</div><div class="line"> * return 远程输出的数据</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getHttpResponsePOST</span><span class="params">($url, $cacert_url, $para, $input_charset = <span class="string">''</span>)</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (trim($input_charset) != <span class="string">''</span>) &#123;</div><div class="line">        $url = $url.<span class="string">"_input_charset="</span>.$input_charset;</div><div class="line">    &#125;</div><div class="line">    $curl = curl_init($url);</div><div class="line">    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, <span class="keyword">true</span>);<span class="comment">//SSL证书认证</span></div><div class="line">    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, <span class="number">2</span>);<span class="comment">//严格认证</span></div><div class="line">    curl_setopt($curl, CURLOPT_CAINFO,$cacert_url);<span class="comment">//证书地址</span></div><div class="line">    curl_setopt($curl, CURLOPT_HEADER, <span class="number">0</span> ); <span class="comment">// 过滤HTTP头</span></div><div class="line">    curl_setopt($curl,CURLOPT_RETURNTRANSFER, <span class="number">1</span>);<span class="comment">// 显示输出结果</span></div><div class="line">    curl_setopt($curl,CURLOPT_POST,<span class="keyword">true</span>); <span class="comment">// post传输数据</span></div><div class="line">    curl_setopt($curl,CURLOPT_POSTFIELDS,$para);<span class="comment">// post传输数据</span></div><div class="line">    $responseText = curl_exec($curl);</div><div class="line">    <span class="comment">//var_dump( curl_error($curl) );//如果执行curl过程中出现异常，可打开此开关，以便查看异常内容</span></div><div class="line">    curl_close($curl);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $responseText;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>处理支付宝返回的数据，并获取token。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//URLDECODE返回的信息</span></div><div class="line">$html_text = urldecode($html_text);</div><div class="line"><span class="comment">//解析远程模拟提交后返回的信息</span></div><div class="line">$para_html_text = parseResponse($html_text);</div><div class="line"><span class="comment">//获取request_token</span></div><div class="line">$request_token = $para_html_text[<span class="string">'request_token'</span>];</div></pre></td></tr></table></figure>
<p>parseResponse函数的实现：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 解析远程模拟提交后返回的信息</div><div class="line"> * <span class="doctag">@param</span> $str_text 要解析的字符串</div><div class="line"> * <span class="doctag">@return</span> 解析结果</div><div class="line"> */</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">parseResponse</span><span class="params">($str_text)</span> </span>&#123;</div><div class="line">    <span class="comment">//以“&amp;”字符切割字符串</span></div><div class="line">    $para_split = explode(<span class="string">'&amp;'</span>,$str_text);</div><div class="line">    <span class="comment">//把切割后的字符串数组变成变量与数值组合的数组</span></div><div class="line">    <span class="keyword">foreach</span> ($para_split <span class="keyword">as</span> $item) &#123;</div><div class="line">        <span class="comment">//获得第一个=字符的位置</span></div><div class="line">        $nPos = strpos($item,<span class="string">'='</span>);</div><div class="line">        <span class="comment">//获得字符串长度</span></div><div class="line">        $nLen = strlen($item);</div><div class="line">        <span class="comment">//获得变量名</span></div><div class="line">        $key = substr($item,<span class="number">0</span>,$nPos);</div><div class="line">        <span class="comment">//获得数值</span></div><div class="line">        $value = substr($item,$nPos+<span class="number">1</span>,$nLen-$nPos<span class="number">-1</span>);</div><div class="line">        <span class="comment">//放入数组中</span></div><div class="line">        $para_text[$key] = $value;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span>( ! <span class="keyword">empty</span> ($para_text[<span class="string">'res_data'</span>])) &#123;</div><div class="line">        <span class="comment">//解析加密部分字符串</span></div><div class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'sign_type'</span>] == <span class="string">'0001'</span>) &#123;</div><div class="line">            $para_text[<span class="string">'res_data'</span>] = rsaDecrypt($para_text[<span class="string">'res_data'</span>], <span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'private_key_path'</span>]);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="comment">//token从res_data中解析出来（也就是说res_data中已经包含token的内容）</span></div><div class="line">        $doc = <span class="keyword">new</span> DOMDocument();</div><div class="line">        $doc-&gt;loadXML($para_text[<span class="string">'res_data'</span>]);</div><div class="line">        $para_text[<span class="string">'request_token'</span>] = $doc-&gt;getElementsByTagName( <span class="string">"request_token"</span> )-&gt;item(<span class="number">0</span>)-&gt;nodeValue;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $para_text;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ol>
</li>
<li><p>携带token进行订单支付。</p>
<p>成功请求token回来后，就可以向支付宝发出一次支付请求。</p>
<p>同样构造请求数据：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//业务详细只需要携带步骤2的token即可。</span></div><div class="line">$req_data = <span class="string">'&lt;auth_and_execute_req&gt;&lt;request_token&gt;'</span> . $request_token . <span class="string">'&lt;/request_token&gt;&lt;/auth_and_execute_req&gt;'</span>;</div><div class="line"><span class="comment">//必填</span></div><div class="line"></div><div class="line"><span class="comment">//构造要请求的参数数组，无需改动</span></div><div class="line">$parameter = <span class="keyword">array</span>(</div><div class="line">    <span class="string">"service"</span> =&gt; <span class="string">"alipay.wap.auth.authAndExecute"</span>,</div><div class="line">    <span class="comment">//  合作者身份(partner ID)</span></div><div class="line">    <span class="string">"partner"</span> =&gt; trim(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'partner'</span>]),</div><div class="line">    <span class="comment">//  签名类型</span></div><div class="line">    <span class="string">"sec_id"</span> =&gt; trim(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'sign_type'</span>]),</div><div class="line">    <span class="comment">//  和步骤2一致</span></div><div class="line">    <span class="string">"format"</span>    =&gt; <span class="keyword">$this</span>-&gt;format,</div><div class="line">    <span class="string">"v"</span> =&gt; <span class="keyword">$this</span>-&gt;v,</div><div class="line">    <span class="string">"req_id"</span>    =&gt; <span class="keyword">$this</span>-&gt;req_id,</div><div class="line">    <span class="comment">//  业务详细参数</span></div><div class="line">    <span class="string">"req_data"</span>  =&gt; $req_data,</div><div class="line">    <span class="comment">//  字符集，一般为utf8.</span></div><div class="line">    <span class="string">"_input_charset"</span>    =&gt; trim(strtolower(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'input_charset'</span>]))</div><div class="line">);</div></pre></td></tr></table></figure>
<p>将这些参数，在页面中传送给支付宝即可发起一次支付请求。</p>
<p>在PHP 中的实现就是将这些参数，渲染至HTML中，再将HTML中的表单提交即可。</p>
<p>到此，网页版的支付宝支付完成整个流程。</p>
</li>
</ol>
<h1 id="支付结果异步通知"><a href="#支付结果异步通知" class="headerlink" title="支付结果异步通知"></a>支付结果异步通知</h1><p>在上面，我们看到有两个参数传给了支付宝：</p>
<ul>
<li><code>call_back_url</code>: 交易成功后，支付宝页面上“返回到商家页面”的地址（同步回调）</li>
<li><code>notify_url</code>: 交易状态变更后，支付宝通知网站的回调地址（异步通知）</li>
</ul>
<blockquote>
<p>对于手机网站支付产生的交易，支付宝会根据原始支付API中传入的异步通知地址notify_url，通过POST请求的形式将支付结果作为参数通知到商户系统。</p>
<p>对于App支付产生的交易，支付宝会根据原始支付API中传入的异步通知地址notify_url，通过POST请求的形式将支付结果作为参数通知到商户系统。</p>
</blockquote>
<p><a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.kuchJN&amp;treeId=204&amp;articleId=105301&amp;docType=1" target="_blank" rel="external">支付宝异步通知官方文档</a>中写的比较清楚，什么时候出发通知，返回什么参数，注意事项都有，开发者可以根据自己的情况查看具体信息。</p>
<p>验签步骤可以移步至<a href="https://doc.open.alipay.com/docs/doc.htm?spm=a219a.7629140.0.0.kuchJN&amp;treeId=204&amp;articleId=105301&amp;docType=1#s7" target="_blank" rel="external">这里</a></p>
<p>这里就简单的用手上的项目举例说明，支付宝通知后，后台是如何进行验签和处理订单。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">app_notifyOp</span><span class="params">()</span></span>&#123;</div><div class="line">    $payment_api = <span class="keyword">$this</span>-&gt;_get_payment_api();</div><div class="line">    $payment_config = <span class="keyword">$this</span>-&gt;_get_payment_config();</div><div class="line">    <span class="comment">// 支付宝是用POST方式发送通知信息</span></div><div class="line">    $callback_info = $payment_api-&gt;getNotifyInfoApp($_POST);</div><div class="line">    <span class="keyword">if</span>($callback_info) &#123;</div><div class="line">        <span class="comment">//验证成功</span></div><div class="line">        <span class="keyword">if</span> ($callback_info[<span class="string">'order_state'</span>]) &#123;</div><div class="line">            <span class="comment">// 如果是支付成功则改变订单状态</span></div><div class="line">            $result = <span class="keyword">$this</span>-&gt;_update_order($callback_info[<span class="string">'out_trade_no'</span>], $callback_info[<span class="string">'trade_no'</span>]);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="comment">// 如果是退款成功则修改退订的相关状态</span></div><div class="line">            $result = <span class="keyword">$this</span>-&gt;_app_refund($callback_info[<span class="string">'out_trade_no'</span>], $callback_info[<span class="string">'trade_no'</span>], $callback_info[<span class="string">'refund_fee'</span>]);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span>($result[<span class="string">'state'</span>]) &#123;</div><div class="line">            <span class="keyword">echo</span> <span class="string">'success'</span>;<span class="keyword">die</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//验证失败</span></div><div class="line">    <span class="keyword">echo</span> <span class="string">"fail"</span>;<span class="keyword">die</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li><p>获取支付宝通知数据<br>支付宝异步通知是<em>POST</em>请求，返回的数据结构如下：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    <span class="attr">"total_amount"</span>: <span class="string">"31.00"</span>,</div><div class="line">    <span class="attr">"buyer_id"</span>: <span class="string">"ID"</span>,</div><div class="line">    <span class="attr">"trade_no"</span>: <span class="string">"TRADE_NO"</span>,</div><div class="line">    <span class="attr">"body"</span>: <span class="string">"pay_sn:580546601841783375"</span>,</div><div class="line">    <span class="attr">"notify_time"</span>: <span class="string">"2017-04-27 09:50:59"</span>,</div><div class="line">    <span class="attr">"subject"</span>: <span class="string">"580546601841783375"</span>,</div><div class="line">    <span class="attr">"sign_type"</span>: <span class="string">"RSA"</span>,</div><div class="line">    <span class="attr">"buyer_logon_id"</span>: <span class="string">"ID"</span>,</div><div class="line">    <span class="attr">"auth_app_id"</span>: <span class="string">"APPID"</span>,</div><div class="line">    <span class="attr">"charset"</span>: <span class="string">"utf-8"</span>,</div><div class="line">    <span class="attr">"notify_type"</span>: <span class="string">"trade_status_sync"</span>,</div><div class="line">    <span class="attr">"invoice_amount"</span>: <span class="string">"31.00"</span>,</div><div class="line">    <span class="attr">"out_trade_no"</span>: <span class="string">"580546601841783375_r"</span>,</div><div class="line">    <span class="attr">"trade_status"</span>: <span class="string">"TRADE_SUCCESS"</span>,</div><div class="line">    <span class="attr">"gmt_payment"</span>: <span class="string">"2017-04-27 09:50:58"</span>,</div><div class="line">    <span class="attr">"version"</span>: <span class="string">"1.0"</span>,</div><div class="line">    <span class="attr">"point_amount"</span>: <span class="string">"0.00"</span>,</div><div class="line">    <span class="attr">"sign"</span>: <span class="string">"SIGNATURE"</span>,</div><div class="line">    <span class="attr">"gmt_create"</span>: <span class="string">"2017-04-27 09:50:58"</span>,</div><div class="line">    <span class="attr">"buyer_pay_amount"</span>: <span class="string">"31.00"</span>,</div><div class="line">    <span class="attr">"receipt_amount"</span>: <span class="string">"31.00"</span>,</div><div class="line">    <span class="attr">"fund_bill_list"</span>: <span class="string">"[&#123;&amp;quot;amount&amp;quot;:&amp;quot;31.00&amp;quot;,&amp;quot;fundChannel&amp;quot;:&amp;quot;ALIPAYACCOUNT&amp;quot;&#125;]"</span>,</div><div class="line">    <span class="attr">"app_id"</span>: <span class="string">"APPID"</span>,</div><div class="line">    <span class="attr">"seller_id"</span>: <span class="string">"SELLERID"</span>,</div><div class="line">    <span class="attr">"notify_id"</span>: <span class="string">"8414394a1190f25edbbec9ba4b98642mem"</span>,</div><div class="line">    <span class="attr">"seller_email"</span>: <span class="string">"YOUR_ALIPAY_ACCOUNT"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>验签数据<br><strong>验签需要支付宝的公钥</strong></p>
<p>验签和签名的流程是一样的，都是将所有除了 <code>sign</code> 以外的参数，进行字典排序，并以 <code>key=value</code> 的形式以 <code>&amp;</code> 符号拼成字符串，再使用密钥进行签名，将得到的签名与支付宝返回的签名进行对比，完成验签过程。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getSignVeryfy</span><span class="params">($para_temp, $sign)</span> </span>&#123;</div><div class="line">    <span class="comment">//除去待签名参数数组中的空值和签名参数</span></div><div class="line">    $para = paraFilter($para_temp);</div><div class="line">    </div><div class="line">    <span class="comment">//对待签名参数数组排序</span></div><div class="line">    $para = argSort($para);</div><div class="line"></div><div class="line">    <span class="comment">//把数组所有元素，按照“参数=参数值”的模式用“&amp;”字符拼接成字符串</span></div><div class="line">    $prestr = createLinkstring($para);</div><div class="line">    $prestr = htmlspecialchars_decode($prestr);</div><div class="line">    $isSgin = <span class="keyword">false</span>;</div><div class="line">    <span class="keyword">switch</span> (strtoupper(trim(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'sign_type'</span>]))) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"MD5"</span> :</div><div class="line">            $isSgin = md5Verify($prestr, $sign, <span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'key'</span>]);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"RSA"</span> :</div><div class="line">            $isSgin = rsaVerify($prestr, trim(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'ali_public_key_path'</span>]), $sign);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"0001"</span> :</div><div class="line">            $isSgin = rsaVerify($prestr, trim(<span class="keyword">$this</span>-&gt;alipay_config[<span class="string">'ali_public_key_path'</span>]), $sign);</div><div class="line">            <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span> :</div><div class="line">            $isSgin = <span class="keyword">false</span>;</div><div class="line">    &#125;</div><div class="line">    logResult($log);</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> $isSgin;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>但是这里有个坑，就是返回数据中的 <code>fund_bill_list</code> 是经过html转义的（如例子中的数据： <code>[{&amp;quot;amount&amp;quot;:&amp;quot;31.00&amp;quot;,&amp;quot;fundChannel&amp;quot;:&amp;quot;ALIPAYACCOUNT&amp;quot;}]</code>），如果直接使用该参数进行签名，则会导致签名失败。这里就需要将字符串转义了： <code>[{&quot;amount&quot;:&quot;31.00&quot;,&quot;fundChannel&quot;:&quot;ALIPAYACCOUNT&quot;}]</code> ，用转义后的参数值进行签名，通过校验。</p>
</li>
<li><p>更改订单状态<br>验签完毕后，后台就可以根据实际情况进行订单状态的更改。</p>
</li>
</ol>
<h1 id="完毕"><a href="#完毕" class="headerlink" title="完毕"></a>完毕</h1><p>祝各位程序猿在开发支付宝支付时不再有坑，也希望支付宝在后续的更新中不再埋雷。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;主要针对在APP应用和网页版的支付功能（支付宝，微信，银联）开发时，所遇到的坑。能填则填。&lt;br&gt;
    
    </summary>
    
    
      <category term="支付" scheme="http://blog.leungjz.top/tags/%E6%94%AF%E4%BB%98/"/>
    
      <category term="支付宝" scheme="http://blog.leungjz.top/tags/%E6%94%AF%E4%BB%98%E5%AE%9D/"/>
    
      <category term="alipay" scheme="http://blog.leungjz.top/tags/alipay/"/>
    
  </entry>
  
  <entry>
    <title>支付开发填坑记之微信支付</title>
    <link href="http://blog.leungjz.top/2017/04/08/payment-wxpay/"/>
    <id>http://blog.leungjz.top/2017/04/08/payment-wxpay/</id>
    <published>2017-04-08T07:15:18.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>微信支付，支持的支付方式比较多：有扫码支付，刷卡支付，APP支付和公众号支付。其中，APP和网站上最常用的就是APP支付和公众号支付。前者集成在APP中，后者主要是为微信用户提供了另一种支付方式（需要在微信的内置浏览器中打开页面，再调起微信支付）。<br><a id="more"></a></p>
<p>微信支付，支持的支付方式比较多：有扫码支付，刷卡支付，APP支付和公众号支付。其中，APP和网站上最常用的就是APP支付和公众号支付。前者集成在APP中，后者主要是为微信用户提供了另一种支付方式（需要在微信的内置浏览器中打开页面，再调起微信支付）。</p>
<p>同样的，微信的APP支付和支付宝的APP支付也是很简单：</p>
<h1 id="APP支付"><a href="#APP支付" class="headerlink" title="APP支付"></a>APP支付</h1><p>商户系统和微信支付系统主要交互说明：</p>
<blockquote>
<p>步骤1：用户在商户APP中选择商品，提交订单，选择微信支付。</p>
<p>步骤2：商户后台收到用户支付单，调用微信<strong>支付统一</strong>下单接口。参见<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1" target="_blank" rel="external">【统一下单API】</a>。</p>
<p>步骤3：统一下单接口返回正常的<strong>prepay_id</strong>，再按签名规范重新生成签名后，将数据传输给APP。参与签名的字段名为<code>appId</code>，<code>partnerId</code>，<code>prepayId</code>，<code>nonceStr</code>，<code>timeStamp</code>，<code>package</code>。<strong>注意：package的值格式为Sign=WXPay</strong></p>
<p>步骤4：商户APP调起微信支付。</p>
<p>步骤5：商户后台接收支付通知。</p>
<p>步骤6：商户后台查询支付结果。</p>
</blockquote>
<p>这里主要的还是后台干活（获取 <code>prepay_id</code>，生成随机字符串 <code>nonceStr</code> 和时间戳 <code>timeStamp</code> ，<code>appId</code> 和 <code>partnerId</code> 均能在后台管理中查看。）</p>
<p>后台的步骤也很简洁，就是上述中的步骤1，2。</p>
<ol>
<li><p>获取 <code>prepayId</code>：</p>
<ol>
<li>设置获取 <code>prepayId</code> 所需参数。</li>
</ol>
<p>此处需要调用微信的统一下单接口。这个过程，<a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=9_1" target="_blank" rel="external">官方文档</a>已经写得十分之详细了，包括调用的接口API地址，需要传递的参数（必要和非必要的参数），还有返回结果也写得很清楚。</p>
<p>以下是我在实际项目开发中传入的参数。<br><img src="http://ojrkbauy9.bkt.clouddn.com/payment-wxpay-app-1.png" alt="项目中传入的参数"></p>
<p><img src="http://ojrkbauy9.bkt.clouddn.com/snipaste_20170408_153159.png" alt="参数解析"></p>
<ol>
<li>签名。</li>
</ol>
<p>签名都差不多，都是先将所有的带签名的参数进行字典排序。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ksort($data);</div></pre></td></tr></table></figure>
<p>然后将参数以 <code>{key}={value}</code> 的组合形式，用 <code>&amp;</code> 连接。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$a = <span class="keyword">array</span>();</div><div class="line"><span class="keyword">foreach</span> ($data <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">    <span class="keyword">if</span> ((string) $v === <span class="string">''</span>) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    $a[] = <span class="string">"&#123;$k&#125;=&#123;$v&#125;"</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">$a = implode(<span class="string">'&amp;'</span>, $a);</div></pre></td></tr></table></figure>
<p>最后拼上 <code>&amp;key={Your apiKey}</code> ，然后对整串字符串进行MD5加密即可。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sign = strtoupper(md5($a));</div></pre></td></tr></table></figure>
</li>
<li><p>将拼好的数据，以 <code>XML</code> 的格式发送给微信，请求 <code>prepayId</code></p>
<p>没错，就是要转成 <code>XML</code> 格式再发送。</p>
<p>但是，这个XML格式很简单，只需要进行简单的拼接即可：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">arrayToXml</span><span class="params">(array $data)</span></span></div><div class="line">&#123;</div><div class="line">    $xml = <span class="string">"&lt;xml&gt;"</span>;</div><div class="line">    <span class="keyword">foreach</span> ($data <span class="keyword">as</span> $k =&gt; $v) &#123;</div><div class="line">        <span class="keyword">if</span> (is_numeric($v)) &#123;</div><div class="line">            $xml .= <span class="string">"&lt;&#123;$k&#125;&gt;&#123;$v&#125;&lt;/&#123;$k&#125;&gt;"</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            $xml .= <span class="string">"&lt;&#123;$k&#125;&gt;&lt;![CDATA[&#123;$v&#125;]]&gt;&lt;/&#123;$k&#125;&gt;"</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    $xml .= <span class="string">"&lt;/xml&gt;"</span>;</div><div class="line">    <span class="keyword">return</span> $xml;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>参数值用XML转义即可，CDATA标签用于说明数据不被XML解析器解析。。</strong></p>
<p>然后请求统一下单API即可（url = <code>https://api.mch.weixin.qq.com/pay/unifiedorder</code>）</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$ch = curl_init();</div><div class="line">curl_setopt($ch, CURLOPT_TIMEOUT, <span class="number">30</span>);</div><div class="line">curl_setopt($ch, CURLOPT_URL, $url);</div><div class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, <span class="keyword">FALSE</span>);</div><div class="line">curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, <span class="keyword">FALSE</span>);</div><div class="line">curl_setopt($ch, CURLOPT_HEADER, <span class="keyword">FALSE</span>);</div><div class="line">curl_setopt($ch, CURLOPT_RETURNTRANSFER, <span class="keyword">TRUE</span>);</div><div class="line">curl_setopt($ch, CURLOPT_POST, <span class="keyword">TRUE</span>);</div><div class="line">curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);</div><div class="line">$response = curl_exec($ch);</div><div class="line"><span class="keyword">if</span> (!$response) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">'CURL Error: '</span> . curl_errno($ch));</div><div class="line">&#125;</div><div class="line">curl_close($ch);</div></pre></td></tr></table></figure>
<p>请求回来的数据也为XML格式，只需要简单做下处理，转换成array即可：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">xmlToArray</span><span class="params">($xml)</span></span>&#123;</div><div class="line">    <span class="keyword">return</span> json_decode(json_encode(simplexml_load_string($xml, <span class="string">'SimpleXMLElement'</span>, LIBXML_NOCDATA)), <span class="keyword">true</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果返回值中的 <code>return_code</code> 和 <code>result_code</code> 都为 <code>SUCCESS</code> 的时候会返回 交易类型 <code>trade_type</code> 和 预支付交易会话标识 <code>prepayId</code> 。到这里，我们就可以获取到 <code>prepayId</code>。</p>
</li>
<li><p>将获取的 <code>prepayId</code> 与其他参数拼接，返回给APP即可。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">$params = <span class="keyword">array</span>();</div><div class="line"><span class="comment">//  商户号</span></div><div class="line">$params[<span class="string">'appid'</span>] = <span class="keyword">$this</span>-&gt;config-&gt;appId;</div><div class="line"><span class="comment">//  时间戳</span></div><div class="line">$params[<span class="string">'timestamp'</span>] = <span class="string">''</span> . time();</div><div class="line"><span class="comment">//  随机字符串</span></div><div class="line">$params[<span class="string">'noncestr'</span>] = md5(uniqid(mt_rand(), <span class="keyword">true</span>));</div><div class="line"><span class="comment">//  固定为 'Sign=WXPay'</span></div><div class="line">$params[<span class="string">'package'</span>] = <span class="string">'Sign=WXPay'</span>;</div><div class="line"><span class="comment">//  步骤3获取的预支付交易会话标识</span></div><div class="line">$params[<span class="string">'prepayid'</span>] = $prepayId;</div><div class="line"><span class="comment">//  合作伙伴id</span></div><div class="line">$params[<span class="string">'partnerid'</span>] = <span class="keyword">$this</span>-&gt;config-&gt;partnerId;</div><div class="line"><span class="comment">//  步骤2生成的签名。</span></div><div class="line">$params[<span class="string">'sign'</span>] = <span class="keyword">$this</span>-&gt;sign($params);</div></pre></td></tr></table></figure>
</li>
</ol>
<p>微信APP支付，后台需要干的活到这里就暂时结束了（因为还有支付成功后的异步通知商户后面再讲）</p>
<hr>
<h1 id="jsapi支付"><a href="#jsapi支付" class="headerlink" title="jsapi支付"></a>jsapi支付</h1><p>下面就是web版的微信支付（公司项目是在微信浏览器内，选择微信支付后，在微信中调起的微信支付）<br><img src="http://ojrkbauy9.bkt.clouddn.com/payment-wxpay-web-1.png" alt="微信支付"></p>
<p>web版微信支付的步骤和APP的大同小异，也是现获取 <code>prepayId</code> ，再在页面中，调用jsapi进行支付。</p>
<p>但是，此处有2个坑</p>
<h3 id="坑1：-支付时出现-appid-and-openid-not-match-的报错"><a href="#坑1：-支付时出现-appid-and-openid-not-match-的报错" class="headerlink" title="坑1： 支付时出现 appid and openid not match 的报错"></a>坑1： 支付时出现 <code>appid and openid not match</code> 的报错</h3><p>原因非常的简单，就是支付时所获取的 <code>openid</code> 在并不属于支付的商户。<br>这个 <code>openid</code> 为微信用户在商户对应appid下的唯一标识。也就是说，必须根据支付的商户的 appid 去获取用户的 <code>openid</code> 。</p>
<p>因为业务逻辑需要，项目中用于<em>微信登录用的公众号A</em>与<em>用于支付的公众号B</em>（其实还和开放平台用于APP支付的 <code>appId</code> 也是不一样的）是不一样的，虽然所获取unionid是一致，但是 <code>openid</code> 是不！一！样！的！所以，在获取 <code>openid</code> 时，需要使用当前支付时所用到的 appid 去请求用户的 <code>openid</code> ，同时，请求 openid 后的回调也必须是 支付商户 后台所设置好的回调地址，要不然就会报 <code>redirect_uri 参数错误</code> 的错误。</p>
<h3 id="坑2：-参数名大小写不一致。"><a href="#坑2：-参数名大小写不一致。" class="headerlink" title="坑2： 参数名大小写不一致。"></a>坑2： 参数名大小写不一致。</h3><p><img src="http://ojrkbauy9.bkt.clouddn.com/payment-wxpay-app-2.png" alt="APP支付的参数"></p>
<p>↑ APP支付的参数</p>
<p><img src="http://ojrkbauy9.bkt.clouddn.com/payment-wxpay-web-2.png" alt="web支付的参数"></p>
<p>↑ web支付的参数</p>
<p>仔细看看划横线的地方。没错，app中的参数的key全是小写，web支付中的key则为驼峰命名方式。而且，签名方式 <code>signType</code> 是必填的， 签名的字段也变成了 <code>paySign</code>，其中 <code>package</code> 的值也是不一样，APP支付是固定的值，web支付则为 <code>prepayId</code>，这也要注意。当然，<a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_7&amp;index=6" target="_blank" rel="external">官方文档</a>也是很详细的说明，但是需要细心观察（所以说嘛，还是直接拷贝必填项最保险了2333）。</p>
<p>拿到所有参数后，就可以在页面中发起微信支付的请求了。</p>
<p>代码可以直接使用官方提供的js代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">onBridgeReady</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   WeixinJSBridge.invoke(</div><div class="line">       <span class="string">'getBrandWCPayRequest'</span>, YOUR_PARAMS,</div><div class="line">       <span class="function"><span class="keyword">function</span>(<span class="params">res</span>)</span>&#123;     </div><div class="line">           <span class="keyword">if</span>(res.err_msg == <span class="string">"get_brand_wcpay_request:ok"</span> ) &#123;</div><div class="line">               <span class="comment">// success_callback</span></div><div class="line">           &#125;     <span class="comment">// 使用以上方式判断前端返回,微信团队郑重提示：res.err_msg将在用户支付成功后返回    ok，但并不保证它绝对可靠。 </span></div><div class="line">       &#125;</div><div class="line">   ); </div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> WeixinJSBridge == <span class="string">"undefined"</span>)&#123;</div><div class="line">   <span class="keyword">if</span>( <span class="built_in">document</span>.addEventListener )&#123;</div><div class="line">       <span class="built_in">document</span>.addEventListener(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady, <span class="literal">false</span>);</div><div class="line">   &#125;<span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">document</span>.attachEvent)&#123;</div><div class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'WeixinJSBridgeReady'</span>, onBridgeReady); </div><div class="line">       <span class="built_in">document</span>.attachEvent(<span class="string">'onWeixinJSBridgeReady'</span>, onBridgeReady);</div><div class="line">   &#125;</div><div class="line">&#125;<span class="keyword">else</span>&#123;</div><div class="line">   onBridgeReady();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>其中 YOUR_PARAMS 是参数转换成json格式直接渲染至页面即可。</p>
<p>如果参数没错的话，那么就可以顺利的调起支付窗口了。</p>
<h3 id="坑3：-APP支付和jsapi支付不是同一个号"><a href="#坑3：-APP支付和jsapi支付不是同一个号" class="headerlink" title="坑3： APP支付和jsapi支付不是同一个号"></a>坑3： APP支付和jsapi支付不是同一个号</h3><p>APP支付是在开放平台中申请下来的，appId和apiKey都是不一样的。而jsapi支付实质就是公众号支付，是在公众平台中申请得到的。所以，在这里，需要注意一下。</p>
<hr>
<p>重要的来了，能体现后台的重要性的地方终于来了 — </p>
<h1 id="支付结果的异步通知"><a href="#支付结果的异步通知" class="headerlink" title="支付结果的异步通知"></a>支付结果的异步通知</h1><p><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_7" target="_blank" rel="external">官方文档</a>写得也很详细了（不得不说，微信的开发文档真的很清晰。很容易找到。就是没有详细的步骤区分）。</p>
<p>首先需要申明的是：异步通知的URL是<em>必须能在公网访问</em>的，而且，必须<em>不能携带参数</em>。</p>
<p>也就是说，<a href="http://domain.com/payment/wxpay/notify.php" target="_blank" rel="external">http://domain.com/payment/wxpay/notify.php</a> 是没问题的，但是 <a href="http://domain.com/payment/notify.php?payment_code=wxpay" target="_blank" rel="external">http://domain.com/payment/notify.php?payment_code=wxpay</a> 这样的URL是不行的。如果要想达到这种效果，要不服务器（Nginx , Apache）进行rewrite，要不在notify.php 中，手动修改 <code>$_GET</code> 中的参数。</p>
<p>返回的数据，都是一致的：<br><img src="http://ojrkbauy9.bkt.clouddn.com/payment-wxpay-notify-web.png" alt=""></p>
<p>这时候，商户后台拿到这些异步通知的数据进行简单的校验即可，然后修改商户中相应订单的支付状态。</p>
<ol>
<li><p>校验返回码是否成功</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">$d = <span class="keyword">$this</span>-&gt;xmlToArray(file_get_contents(<span class="string">'php://input'</span>));</div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($d)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="keyword">__METHOD__</span>);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> ($d[<span class="string">'return_code'</span>] != <span class="string">'SUCCESS'</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>($d[<span class="string">'return_msg'</span>]);</div><div class="line">&#125;</div><div class="line"><span class="keyword">if</span> ($d[<span class="string">'result_code'</span>] != <span class="string">'SUCCESS'</span>) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"[&#123;$d['err_code']&#125;]&#123;$d['err_code_des']&#125;"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>对返回数据进行校验</p>
<p>和请求 <code>prepayId</code> 时处理数据的方式差不多，先取出签名 <code>sign</code>，然后除去签名后，进行字典排序，以 <code>{key}={value}</code> 的方式进行组合，并在最后加上 <code>&amp;key={apiKey}</code>得到待校验字符串，最后，将待校验字符串进行MD5加密，和签名进行比较，若一致则校验成功，并且支付成功，然后后台做相应操作。</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="keyword">$this</span>-&gt;verify($d)) &#123;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="keyword">Exception</span>(<span class="string">"Invalid signature"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//  验证函数</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">empty</span>($d[<span class="string">'sign'</span>])) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</div><div class="line">&#125;</div><div class="line">$sign = $d[<span class="string">'sign'</span>];</div><div class="line"><span class="keyword">unset</span>($d[<span class="string">'sign'</span>]);</div><div class="line"><span class="keyword">return</span> $sign == <span class="keyword">$this</span>-&gt;sign($d);</div></pre></td></tr></table></figure>
</li>
</ol>
<h1 id="微信退款"><a href="#微信退款" class="headerlink" title="微信退款"></a>微信退款</h1><p>有支付肯定就会有退款。微信的退款操作也是很简单，而且退款速度非常快，测试时基本都是秒退。</p>
<p>但是退款是有注意事项的：</p>
<ol>
<li>交易时间超过<em>一年</em>的订单无法提交退款；</li>
<li>微信支付退款支持单笔交易分多次退款，多次退款需要提交<strong>原支付订单的商户订单号</strong>和设置<strong>不同的退款单号</strong>。总退款金额不能超过用户实际支付金额。<strong>一笔退款失败后重新提交，请不要更换退款单号，请使用原商户退款单号</strong>。</li>
<li><strong>退款请求需要证书</strong>。</li>
</ol>
<p>【证书获取方式：】</p>
<blockquote>
<p>微信支付接口中，涉及资金回滚的接口会使用到商户证书，包括退款、撤销接口。商家在申请微信支付成功后，收到的相应邮件后，可以按照指引下载API证书，也可以按照以下路径下载：微信商户平台(pay.weixin.qq.com)–&gt;账户中心–&gt;账户设置–&gt;API安全–&gt;证书下载。</p>
</blockquote>
<p>微信退款程序流程：<br><img src="http://ojrkbauy9.bkt.clouddn.com/wxpay-refund-3.png" alt="退款流程"></p>
<ol>
<li><p>设置退款时得参数。</p>
<p>请求的参数有：</p>
<ol>
<li>appid ： 公众账号ID</li>
<li>mch_id ： 商户号</li>
<li>nonce_str ： 随机字符串    </li>
<li>sign： 签名</li>
<li>transaction_id / out_trade_no ：微信订单号 / 商户订单号 二者中传其中一个即可。</li>
<li>out_refund_no： 商户退款单号（由商户自行生成的唯一标识）</li>
<li>total_fee：订单金额（单位为分）</li>
<li>refund_fee：退款金额（单位为分），退款金额不能大于订单金额。</li>
<li>op_user_id：操作员帐号, 默认为商户号</li>
</ol>
<p>签名还是老规矩（默认是MD5方式），先将所有参数进行字典排序，然后以<code>$key=$value</code>的形式用<code>&amp;</code>字符拼接成字符串，最后将拼上 <code>&amp;key=YOUR_APIKEY</code> 的待签名字符串进行MD5加密即可。<br><img src="http://ojrkbauy9.bkt.clouddn.com/wxpay-refund-4.png" alt="签名方法"></p>
</li>
<li><p>将参数列表转换成XML格式。<br><img src="http://ojrkbauy9.bkt.clouddn.com/wxpay-refund-5.png" alt="将参数列表转换成XML格式"></p>
</li>
<li><p>发送退款请求。</p>
<p><strong>退款请求需要携带微信上下载的证书，请保证证书存放路径外网不能直接访问。</strong><br><img src="http://ojrkbauy9.bkt.clouddn.com/wxpay-refund-6.png" alt="发送退款请求"></p>
</li>
<li><p>解析请求结果。</p>
<p>当返回的结果中， <code>return_code</code> 和 <code>result_code</code> 均为 <code>SUCCESS</code> ，即为退款申请成功。更多返回结果，请移步至 <a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=9_4" target="_blank" rel="external">官网</a></p>
</li>
</ol>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>微信支付的官方开发文档其实算是很详细了，传递的参数，返回结果，如果判断是否成功，都写的很好。只是，开发中的逻辑过程需要自己慢慢摸索，理清思路后，开发起来其实都是很迅速的。</p>
<p>但是，开发微信支付时，需要留个心，需要将所有涉及到的微信后台提供的数据小心保存（比如AppSecret，一当忘记只能重置。）</p>
<p>祝各位开发过程顺利进行。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信支付，支持的支付方式比较多：有扫码支付，刷卡支付，APP支付和公众号支付。其中，APP和网站上最常用的就是APP支付和公众号支付。前者集成在APP中，后者主要是为微信用户提供了另一种支付方式（需要在微信的内置浏览器中打开页面，再调起微信支付）。&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://blog.leungjz.top/tags/php/"/>
    
      <category term="微信支付" scheme="http://blog.leungjz.top/tags/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
      <category term="微信" scheme="http://blog.leungjz.top/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="坑" scheme="http://blog.leungjz.top/tags/%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>使用七牛云存储图片 之 上传图片</title>
    <link href="http://blog.leungjz.top/2017/01/22/qiniu-js-upload/"/>
    <id>http://blog.leungjz.top/2017/01/22/qiniu-js-upload/</id>
    <published>2017-01-22T09:35:55.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>七牛云是国内算是挺不错的图片存储服务器，免费用户能拥有10G空间，每个月10G的下载流量，对于个人用户用于做个小博客，小网站来说，已经够了。<br><a id="more"></a></p>
<p>但是，七牛的官方开发文档真心会看得一头雾水。</p>
<p>于是，先记录下来这次传图的过程。</p>
<p>在上传图片之前，需要准备两样东西：</p>
<ol>
<li><code>AccessKey</code></li>
<li><code>SecretKey</code></li>
</ol>
<p>其中， AccessKey 和 SecretKey 能在 个人中心 &gt; 秘钥管理中获得,如图。</p>
<ol>
<li><p>创建空间 并 创建配置文件</p>
<p>选择 <strong>资源主页</strong> ，再选择 <strong>立即添加</strong>，或者选择 <strong>对象存储</strong> ，然后选择 <strong>添加</strong> 。</p>
<p>然后填上空间的名字，选择区域即可。</p>
<p><strong>其中，空间的名字是我们使用代码上传至七牛服务器的第三个参数 <code>Bucket</code></strong></p>
<p>可以将这3个常量存储在配置文件<code>config.qiniu.php</code>中</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">define(&apos;QINIU_SECRET_KEY&apos;, &apos;YOUR_SK&apos;);</div><div class="line">define(&apos;QINIU_ACCESS_KEY&apos;, &apos;YOUR_AK&apos;);</div><div class="line">define(&apos;QINIU_DOMAIN&apos;, &apos;YOUR_QINIU_DOMAIN&apos;);</div><div class="line">define(&apos;QINIU_BUCKET&apos;, &apos;YOUR_BUCKET_NAME&apos;);</div></pre></td></tr></table></figure>
</li>
<li><p>获取上传凭证</p>
<p>上传凭证的作用：</p>
<blockquote>
<p>客户端上传前需要先从服务端获取上传凭证，并在上传资源时将上传凭证作为请求内容的一部分。不带凭证或带非法凭证的请求将返回 HTTP 错误码 401，代表认证失败。</p>
</blockquote>
<p>生成规则：</p>
<ol>
<li><p>构造上传策略：</p>
<blockquote>
<p>上传策略是资源上传时附带的一组配置设定。通过这组配置信息，七牛云存储可以了解用户上传的需求：它将上传什么资源，上传到哪个空间，上传结果是回调通知还是使用重定向跳转，是否需要设置反馈信息的内容，以及授权上传的截止时间等等。</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line"></div><div class="line">    &quot;scope&quot;:               &quot;&lt;Bucket                   string&gt;&quot;,</div><div class="line">    &quot;deadline&quot;:             &lt;UnixTimestamp            uint32&gt;,</div><div class="line">    &quot;insertOnly&quot;:           &lt;AllowFileUpdating        int&gt;,</div><div class="line">    &quot;endUser&quot;:             &quot;&lt;EndUserId                string&gt;&quot;,</div><div class="line">    &quot;returnUrl&quot;:           &quot;&lt;RedirectURL              string&gt;&quot;,</div><div class="line">    &quot;returnBody&quot;:          &quot;&lt;ResponseBodyForAppClient string&gt;&quot;,</div><div class="line">    &quot;callbackUrl&quot;:         &quot;&lt;RequestUrlForAppServer   string&gt;&quot;,</div><div class="line">    &quot;callbackHost&quot;:        &quot;&lt;RequestHostForAppServer  string&gt;&quot;,</div><div class="line">    &quot;callbackBody&quot;:        &quot;&lt;RequestBodyForAppServer  string&gt;&quot;,</div><div class="line">    &quot;callbackBodyType&quot;:    &quot;&lt;RequestBodyTypeForAppServer  string&gt;&quot;,</div><div class="line">    &quot;callbackFetchKey&quot;:     &lt;RequestKeyForApp         int&gt;</div><div class="line">    &quot;persistentOps&quot;:       &quot;&lt;persistentOpsCmds        string&gt;&quot;,</div><div class="line">    &quot;persistentNotifyUrl&quot;: &quot;&lt;persistentNotifyUrl      string&gt;&quot;,</div><div class="line">    &quot;persistentPipeline&quot;:  &quot;&lt;persistentPipeline       string&gt;&quot;,</div><div class="line">    &quot;saveKey&quot;:             &quot;&lt;SaveKey                  string&gt;&quot;,</div><div class="line">    &quot;fsizeMin&quot;:             &lt;FileSizeMin            int64&gt;,</div><div class="line">    &quot;fsizeLimit&quot;:           &lt;FileSizeLimit            int64&gt;,</div><div class="line">    &quot;detectMime&quot;:           &lt;AutoDetectMimeType       int&gt;,</div><div class="line">    &quot;mimeLimit&quot;:           &quot;&lt;MimeLimit                string&gt;&quot;</div><div class="line">    &quot;deleteAfterDays&quot;:     &quot;&lt;deleteAfterDays          int&gt;&quot;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<table><br><tr><th>字段名称    </th><th>必填 </th><th>说明 </th></tr><br><tr><td>scope      </td><td>是          </td><td>指定上传的目标资源空间 Bucket 和资源键 Key（key的长度最大为750字节）。有两种格式： ● <code>&lt;bucket&gt;</code>，表示允许用户上传文件到指定的 bucket。在这种格式下文件只能新增，若已存在同名资源上传则会失败。  ● <code>&lt;bucket&gt;</code>:<code>&lt;key&gt;</code>，表示只允许用户上传指定 key 的文件。在这种格式下文件默认允许修改，若已存在同名资源则会被覆盖。如果只希望上传指定 key 的文件，并且不允许修改，那么可以将下面的 <code>insertOnly</code> 属性值设为 1</td></tr><br><tr><td>deadline   </td><td>是          </td><td>上传凭证有效截止时间。<code>Unix时间戳</code>，单位为秒。该截止时间为上传完成后，在七牛空间生成文件的校验时间，而非上传的开始时间，一般建议设置为上传开始时间 + 3600s，用户可根据具体的业务场景对凭证截止时间进行调整。</td></tr><br><tr><td>insertOnly </td><td>     </td><td>        限定为新增语意。如果设置为非 0 值，则无论 <code>scope</code> 设置为什么形式，仅能以新增模式上传文件。</td></tr><br><tr><td>endUser </td><td>     </td><td>        唯一属主标识。特殊场景下非常有用，例如根据 App-Client 标识给图片或视频打水印。</td></tr><br><tr><td>returnUrl </td><td>     </td><td>        Web 端文件上传成功后，浏览器执行 303 跳转的 URL。通常用于 HTML Form 上传。文件上传成功后会跳转到 <code>&lt;returnUrl&gt;?upload_ret=&lt;queryString&gt;</code>，<code>&lt;queryString&gt;</code>包含 <code>returnBody</code> 内容。如不设置 returnUrl，则直接将 returnBody 的内容返回给客户端。</td></tr><br><tr><td>returnBody </td><td>     </td><td>        上传成功后，自定义七牛云最终返回給上传端（在指定 returnUrl 时是携带在跳转路径参数中）的数据。支持魔法变量和自定义变量。returnBody 要求是合法的 JSON 文本。例如 <code>{&quot;key&quot;: $(key), &quot;hash&quot;: $(etag), &quot;w&quot;: $(imageInfo.width), &quot;h&quot;: $(imageInfo.height)}</code>。</td></tr><br><tr><td>callbackUrl </td><td>     </td><td>        上传成功后，七牛云向 App-Server 发送 POST 请求的 URL。必须是公网上可以正常进行 POST 请求并能响应 HTTP/1.1 200 OK 的有效 URL。另外，为了给客户端有一致的体验，我们要求 callbackUrl 返回包 Content-Type 为 “application/json”，即返回的内容必须是合法的 JSON 文本。出于高可用的考虑，本字段允许设置多个 callbackUrl(用英文符号 ; 分隔)，在前一个 callbackUrl 请求失败的时候会依次重试下一个 callbackUrl。一个典型例子是 <code>http://&lt;ip1&gt;/callback;http://&lt;ip2&gt;/callback</code>，并同时指定下面的 callbackHost 字段。在 callbackUrl 中使用 ip 的好处是减少了对 dns 解析的依赖，可改善回调的性能和稳定性。</td></tr><br><tr><td>callbackHost </td><td>     </td><td>        上传成功后，七牛云向”App-Server”发送回调通知时的 Host 值。 与callbackUrl配合使用，仅当设置了 callbackUrl 时才有效。”callbackHost”:”a.example.com”，host域名不加http://</td></tr><br><tr><td>callbackBody </td><td>     </td><td>        上传成功后，七牛云向”App-Server”发送Content-Type: application/x-www-form-urlencoded 的POST请求。 该字段”App-Server”可以通过直接读取请求的query来获得，支持魔法变量和自定义变量。callbackBody 要求是合法的 url query string。如：<code>key=$(key)&amp;hash=$(etag)&amp;w=$(imageInfo.width)&amp;h=$(imageInfo.height)</code>。</td></tr><br><tr><td>callbackBodyType </td><td>     </td><td>        上传成功后，七牛云向”App-Server”发送回调通知<code>callbackBody</code>的<code>Content-Type</code>。 默认为<code>application/x-www-form-urlencoded</code>，也可设置为<code>application/json</code>。</td></tr><br><tr><td>callbackFetchKey </td><td>     </td><td>        是否启用fetchKey上传模式。 0为关闭，1为启用。具体见callbackFetchKey详解。</td></tr><br><tr><td>persistentOps </td><td>     </td><td>        资源上传成功后触发执行的预转持久化处理指令列表。 每个指令是一个API规格字符串，多个指令用;分隔。 请参阅persistenOps详解与示例。同时添加persistentPipeline字段，使用专用队列处理，请参阅persistentPipeline。</td></tr><br><tr><td>persistentNotifyUrl </td><td>     </td><td>        接收持久化处理结果通知的URL。 必须是公网上可以正常进行POST请求并能响应”HTTP/1.1 200 OK”的有效URL。 该URL获取的内容和持久化处理状态查询(prefop)的处理结果一致。 发送body格式是<code>Content-Type</code>为<code>application/json</code>的POST请求，需要按照读取流的形式读取请求的body才能获取。</td></tr><br><tr><td>persistentPipeline </td><td>     </td><td>        转码队列名。 资源上传成功后，触发转码时指定独立的队列进行转码。为空则表示使用公用队列，处理速度比较慢。建议使用专用队列。</td></tr><br><tr><td>saveKey </td><td>     </td><td>        自定义资源名。 支持魔法变量及自定义变量。这个字段仅当用户上传的时候没有主动指定key的时候起作用。</td></tr><br><tr><td>fsizeMin </td><td>     </td><td>        限定上传文件大小最小值，单位：字节（Byte）。设置为k，即k及k以上的文件可以上传。</td></tr><br><tr><td>fsizeLimit </td><td>     </td><td>        限定上传文件大小最大值，单位：字节（Byte）。 超过限制上传文件大小的最大值会被判为上传失败，返回413状态码。</td></tr><br><tr><td>detectMime </td><td>     </td><td>        开启MimeType侦测功能。 设为非0值，则忽略上传端传递的文件MimeType信息，使用七牛服务器侦测内容后的判断结果。 默认设为0值，如上传端指定了MimeType则直接使用该值，否则按如下顺序侦测MimeType值： 1. 检查文件扩展名； 2. 检查Key扩展名； 3. 侦测内容。 如不能侦测出正确的值，会默认使用 <code>application/octet-stream</code> 。</td></tr><br><tr><td>mimeLimit </td><td>     </td><td>        限定用户上传的文件类型。 指定本字段值，七牛服务器会侦测文件内容以判断MimeType，再用判断值跟指定值进行匹配，匹配成功则允许上传，匹配失败则返回403状态码。 示例： ● <code>image/*</code>表示只允许上传图片类型  ● <code>image/jpeg;image/png</code>表示只允许上传jpg和png类型的图片  ● <code>!application/json;text/plain</code>表示禁止上传json文本和纯文本。注意最前面的感叹号！</td></tr><br><tr><td>deleteAfterDays </td><td>     </td><td>        文件在多少天后被删除，七牛将文件上传时间与指定的<code>deleteAfterDays</code>天数相加，得到的时间入到后一天的午夜(CST,中国标准时间)，从而得到文件删除开始时间。例如文件在2015年1月1日上午10:00 CST上传，指定<code>deleteAfterDays</code>为3天，那么会在2015年1月5日00:00 CST之后当天内删除文件。</td></tr><br></table>

<p>如现有如下上传策略：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   $putPolicy = <span class="keyword">array</span>(</div><div class="line">       <span class="string">'scope'</span> =&gt; QINIU_BUCKET.<span class="string">':'</span>.$filename ,</div><div class="line">   	<span class="string">'deadline'</span> =&gt; time()+<span class="number">3600</span> ,</div><div class="line">   	<span class="string">'returnBody'</span> =&gt; <span class="string">'&#123;</span></div><div class="line">   		"name": $(fname),</div><div class="line">           "file_url": $(x:file_url)</div><div class="line">   	&#125;'</div><div class="line">);</div></pre></td></tr></table></figure>
<p>该上传策略定义了：</p>
<pre><code>1.  指定了图片上传至`QINIU_BUCKET`存储空间中，同时，该token只允许文件名为 `$filename` 的文件上传。
2.  token有效时间为1个小时。
3.  设置返回信息，返回上传的文件的文件名，和自定义参数中的 `file_url`
</code></pre></li>
<li><p>将上传策略序列化成为JSON格式：<br>用户可以使用各种语言的 JSON 库，也可以手工拼接字符串。序列化后，应得到如下形式的字符串（字符串值以外部分不含空格或换行）：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$putPolicy = json_encode($putPolicy);</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$putPolicy = <span class="string">'&#123;</span></div><div class="line">    "scope": "my-bucket:sunflower.jpg",</div><div class="line">    "deadline":1451491200,</div><div class="line">    "returnBody":</div><div class="line">        "&#123;</div><div class="line">        \"name\":$(fname),</div><div class="line">        \"size\":$(fsize),</div><div class="line">        \"w\":$(imageInfo.width),</div><div class="line">        \"h\":$(imageInfo.height),</div><div class="line">        \"hash\":$(etag)</div><div class="line">    &#125;"</div><div class="line">&#125;'</div></pre></td></tr></table></figure>
</li>
<li><p>对 JSON 编码的上传策略进行URL安全的Base64编码，得到待签名字符串：<br>官方给的demo代码为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">encodedPutPolicy = urlsafe_base64_encode(putPolicy)</div></pre></td></tr></table></figure>
<p>运行之后，发现 <code>urlsafe_base64_encode</code> 这个函数是自定义的，估计相当于将 <code>+,/</code>号转换为 <code>-,_</code></p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">   <span class="function"><span class="keyword">function</span> <span class="title">_urlsafe_base64_encode</span><span class="params">($str)</span></span>&#123;</div><div class="line">	$find = <span class="keyword">array</span>(<span class="string">'+'</span>, <span class="string">'/'</span>);</div><div class="line">	$replace = <span class="keyword">array</span>(<span class="string">'-'</span>, <span class="string">'_'</span>);</div><div class="line">	<span class="keyword">return</span> str_replace($find, $replace, base64_encode($str));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>使用SecretKey对上一步生成的待签名字符串计算HMAC-SHA1签名：<br>官方给的demo代码为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sign = hmac_sha1(encodedPutPolicy, QINIU_SECRET_KEY)</div></pre></td></tr></table></figure>
<p>然而， <code>hmac_sha1</code> 这个函数也不是php自带的。经过搜索发现，其实PHP5.1.2之后的版本内置了直接产生的函数，只是名字不一样罢了： <a href="http://php.net/manual/en/function.hash-hmac.php" target="_blank" rel="external">hash_hmac</a>，因此需要将这里修改为：</p>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sign = hash_hmac(<span class="string">'sha1'</span> ,$encodedPutPolicy, QINIU_SECRET_KEY, <span class="keyword">true</span>);</div></pre></td></tr></table></figure>
<p>第一个参数为哈希算法名（支持<code>md5</code>，<code>sha256</code>，<code>haval160,4</code>等，具体可到<a href="http://php.net/manual/zh/function.hash-algos.php" target="_blank" rel="external"> hash_algos()</a>中查询）；第二个参数为需要进行哈希的信息；第三个参数为秘钥；第四个参数为输出格式（true为输出二进制，false为输出16进制）</p>
</li>
<li><p>对签名进行URL安全的Base64编码：<br>官方代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">encodedSign = urlsafe_base64_encode(sign)</div></pre></td></tr></table></figure>
<p>这里的 <code>urlsafe_base64_encode</code> 依然为上述的自定义函数。</p>
</li>
<li><p>将AccessKey、encodedSign 和 encodedPutPolicy 用英文符号 <code>:</code> 连接起来：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$uploadToken = QINIU_ACCESS_KEY . &apos;:&apos; . $encodedSign . &apos;:&apos; . $encodedPutPolicy</div></pre></td></tr></table></figure>
</li>
<li><p>返回token至客户端</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">echo json_encode(array(&apos;token&apos; =&gt; $uploadToken, &apos;key&apos; =&gt; $filename, &apos;fileurl&apos; =&gt; QINIU_DOMAIN));</div></pre></td></tr></table></figure>
<p>这里返回了文件名和文件url，主要是因为，保证文件在七牛中的唯一性，和可以随时更改七牛的空间访问地址。</p>
</li>
</ol>
</li>
<li><p>上传图片<br>使用js直接上传图片至七牛服务器他的过程为：</p>
<p>向服务器请求 <code>uploadToken</code> =&gt;</p>
<p>获取 ‘uploadToken` 后上传图片 =&gt;</p>
<p>上传成功，显示图片。</p>
<p><strong>这里没有使用 zepto jquery 这种库，所以浏览器的兼容性为兼容 FormData 的现代浏览器</strong></p>
<p>使用 xhr 和 FormData 进行异步传输数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ajax</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">    options.start &amp;&amp; options.start.call(<span class="string">'start'</span>);</div><div class="line">    <span class="comment">//执行上传操作</span></div><div class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</div><div class="line">    xhr.open(<span class="string">"post"</span>, options.url, <span class="literal">true</span>);</div><div class="line">    xhr.setRequestHeader(<span class="string">"X-Requested-With"</span>, <span class="string">"XMLHttpRequest"</span>);</div><div class="line">    xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (xhr.readyState == <span class="number">4</span>) &#123;</div><div class="line">            returnDate = <span class="built_in">JSON</span>.parse(xhr.responseText);</div><div class="line">            options.success &amp;&amp; options.success.call(<span class="string">'success'</span>, returnDate);</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//表单数据</span></div><div class="line">    <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</div><div class="line">    <span class="keyword">for</span> (k <span class="keyword">in</span> options.data) &#123;</div><div class="line">        fd.append(k, options.data[k]);</div><div class="line">    &#125;</div><div class="line">    fd.append(<span class="string">'file'</span>, options.file);</div><div class="line">    <span class="comment">//执行发送</span></div><div class="line">    result = xhr.send(fd);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>新建一个表单 form</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">name</span>=<span class="string">"upload_form"</span> <span class="attr">hidden</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"key"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"x:file_url"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"hidden"</span> <span class="attr">name</span>=<span class="string">"token"</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure>
<p>给上传文件的按钮绑定一个 change 时间：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">file.addEventListener(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> selected_file = e.target.files[<span class="number">0</span>];</div><div class="line">    <span class="comment">// 先请求服务器获取token</span></div><div class="line">    ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'/upload.php'</span>,</div><div class="line">        <span class="attr">data</span>: &#123;</div><div class="line">            <span class="attr">filename</span>: selected_file.name</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">start</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'start to get uploadToken'</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            <span class="comment">// 给表单中的参数赋值</span></div><div class="line">            form.key.value = data.key;</div><div class="line">            form.file_url.value = data.fileurl+data.key;</div><div class="line">            form.token.value = data.token;</div><div class="line"></div><div class="line">            <span class="comment">// 执行上传图片操作</span></div><div class="line">            uploadImage(selected_file)</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>开始上传文件至七牛</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadImage</span>(<span class="params">file</span>)</span>&#123;</div><div class="line">    ajax(&#123;</div><div class="line">        <span class="comment">// 如果</span></div><div class="line">        url: <span class="string">'http://upload.qiniu.com/'</span>,</div><div class="line">        <span class="comment">// url: 'https://up.qbox.me',</span></div><div class="line">        data: &#123;</div><div class="line">            <span class="attr">file</span>: file,</div><div class="line">            <span class="attr">key</span>: form.key.value,</div><div class="line">            <span class="string">'x:file_url'</span>: form.file_url.value,</div><div class="line">            <span class="attr">token</span>: form.token.value,</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">start</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'start to upload Image to Qiniu'</span>);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</div><div class="line">            <span class="comment">// 给表单中的参数赋值</span></div><div class="line">            <span class="built_in">console</span>.log(data);</div><div class="line">            image.src = data.file_url</div><div class="line">        &#125;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>最终实现：<br><img src="http://ojrkbauy9.bkt.clouddn.com/973f9ed26b6ae914e6b7174c69a4bf6e" alt="最终实现"></p>
<p><strong><a href="https://github.com/JZLeung/qiniu_upload_demo" target="_blank" rel="external">GitHub Demo</a> 欢迎吐槽</strong></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;七牛云是国内算是挺不错的图片存储服务器，免费用户能拥有10G空间，每个月10G的下载流量，对于个人用户用于做个小博客，小网站来说，已经够了。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.leungjz.top/tags/javascript/"/>
    
      <category term="qiniu" scheme="http://blog.leungjz.top/tags/qiniu/"/>
    
      <category term="upload" scheme="http://blog.leungjz.top/tags/upload/"/>
    
  </entry>
  
  <entry>
    <title>使用 Git Hooks 实现自动部署PHP项目</title>
    <link href="http://blog.leungjz.top/2016/11/17/git-hooks/"/>
    <id>http://blog.leungjz.top/2016/11/17/git-hooks/</id>
    <published>2016-11-17T03:37:09.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近正在寻找一种简便的自动部署代码到服务器的方式，然后就发现了git hooks这个方法，查了一些资料再自己尝试过后，觉得还不错，记录下。<br><a id="more"></a></p>
<h2 id="什么是git-hooks"><a href="#什么是git-hooks" class="headerlink" title="什么是git hooks"></a>什么是git hooks</h2><p>在git上是这么介绍的：</p>
<blockquote>
<p>和其它版本控制系统一样，Git能在特定的重要动作发生时触发自定义脚本。有两组这样的钩子：客户端的和服务器端的。客户端钩子由诸如提交和合并这样的操作所调用，而服务器端钩子作用于诸如接收被推送的提交这样的联网操作。 你可以随心所欲地运用这些钩子。</p>
</blockquote>
<p>我觉得可以这么理解，一个钩子就像是js中的回调，每当git完成一个动作，如<code>commit</code>，<code>push</code>等，就可以触发相对应的事件。</p>
<h2 id="git-hooks的种类"><a href="#git-hooks的种类" class="headerlink" title="git hooks的种类"></a>git hooks的种类</h2><p>git中，有两种类型的钩子：客户端的和服务器端的。</p>
<p>客户端的钩子有：</p>
<ol>
<li><p><code>pre-commit</code> 钩子在键入提交信息前运行。</p>
</li>
<li><p><code>prepare-commit-msg</code> 钩子在启动提交信息编辑器之前，默认信息被创建之后运行。</p>
</li>
<li><p><code>post-commit</code> 钩子在整个提交过程完成后运行。</p>
</li>
<li><code>applypatch-msg</code> 你可以用该脚本来确保提交信息符合格式，或直接用脚本修正格式错误。</li>
<li><code>pre-applypatch</code> 在 <code>git am</code> 运行期间被调用</li>
<li><code>post-applypatch</code> 运行于提交产生之后，是在 <code>git am</code> 运行期间最后被调用的钩子。</li>
<li><code>pre-rebase</code>  钩子运行于变基之前，以非零值退出可以中止变基的过程。</li>
<li><code>post-rewrite</code> 钩子被那些会替换提交记录的命令调用。</li>
<li><code>post-checkout</code> 在 <code>git checkout</code> 成功运行后调用。</li>
<li><code>post-merge</code> 在 <code>git merge</code> 成功运行后调用。</li>
<li><code>pre-push</code> 在 <code>git push</code> 运行期间， 更新了远程引用但尚未传送对象时被调用。</li>
<li><code>pre-auto-gc</code> 会在垃圾回收开始之前被调用，可以用它来提醒你现在要回收垃圾了，或者依情形判断是否要中断回收。</li>
</ol>
<p>服务器端的钩子有：</p>
<ol>
<li><code>pre-receive</code> 处理来自客户端的推送操作时最先被调用。</li>
<li><code>update</code> 它会为每一个准备更新的分支各运行一次。</li>
<li><code>post-receive</code> 在整个过程完结以后运行，可以用来更新其他系统服务或者通知用户。</li>
</ol>
<h2 id="如何使用git-hooks"><a href="#如何使用git-hooks" class="headerlink" title="如何使用git hooks"></a>如何使用git hooks</h2><p>所有的钩子脚本都存放在 <code>.git/hooks</code> 文件夹中。当使用 <code>git init</code> 初始化一个新版本库时，Git 默认会在这个目录中放置一些示例脚本。这些示例的名字都是以 <code>.sample</code> 结尾，如果你想启用它们，得先移除这个后缀。</p>
<h2 id="简单的自动部署"><a href="#简单的自动部署" class="headerlink" title="简单的自动部署"></a>简单的自动部署</h2><h3 id="在服务器初始化一个远程git仓库"><a href="#在服务器初始化一个远程git仓库" class="headerlink" title="在服务器初始化一个远程git仓库"></a>在服务器初始化一个远程git仓库</h3><h4 id="git-init-和-git-init-bare-的区别"><a href="#git-init-和-git-init-bare-的区别" class="headerlink" title="git init 和 git init --bare 的区别"></a><code>git init</code> 和 <code>git init --bare</code> 的区别</h4><p>初始化出来的仓库是不一样的，前者初始化的是一个普通的仓库，其中 <code>.git</code> 文件夹是隐藏的，并且能看见该仓库下所有的源码。而后者初始化出来的仓库中的文件，就是 <code>.git</code> 中的文件夹，但不能像前者那样直接浏览或修改仓库中的代码。<br><img src="git-hooks/1480143670425_4.png" alt="git init 两种初始化"></p>
<h4 id="使用-git-init-bare-初始化一个远程仓库。"><a href="#使用-git-init-bare-初始化一个远程仓库。" class="headerlink" title="使用 git init --bare 初始化一个远程仓库。"></a>使用 <code>git init --bare</code> 初始化一个远程仓库。</h4><p>该仓库是用于项目部署的。在我们本地开发完成后，将项目push至该仓库后，将自动部署网站。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$   <span class="built_in">cd</span> ~/workspace</div><div class="line">$   mkdir project</div><div class="line">$   <span class="built_in">cd</span> project</div><div class="line">$   git init --bare</div></pre></td></tr></table></figure></p>
<h3 id="在服务器初始化一个本地仓库"><a href="#在服务器初始化一个本地仓库" class="headerlink" title="在服务器初始化一个本地仓库"></a>在服务器初始化一个本地仓库</h3><p>因为php的项目基本不需要编译后运行，所以将网站的根目录作为本地仓库了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$   <span class="built_in">cd</span> /var/www/html/project</div><div class="line">$   git <span class="built_in">clone</span> ~/workspace/project</div></pre></td></tr></table></figure></p>
<p><del>之前看教程都是新建一个 <code>project</code> 文件夹再 <code>clone</code>，但是这样会将项目目录就变成了 <code>/var/www/html/project/project</code> 所以直接在根目录 <code>clone</code> 即可。</del></p>
<h3 id="为远程仓库设置一个-hook"><a href="#为远程仓库设置一个-hook" class="headerlink" title="为远程仓库设置一个 hook"></a>为远程仓库设置一个 hook</h3><p>设置一个 <code>post-receive</code> 钩子，当仓库收到push请求后，就会自动执行该钩子中的脚本。<br>现在就通过该钩子实现简单的项目部署。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#!/bin/sh</span></div><div class="line"><span class="built_in">unset</span> GIT_DIR</div><div class="line"><span class="built_in">cd</span> /var/www/html/project</div><div class="line">git pull origin master</div></pre></td></tr></table></figure></p>
<p>编辑完成后，给该脚本添加可执行权限<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$   chmod +x post-receive</div></pre></td></tr></table></figure></p>
<h2 id="测试是否能自动部署"><a href="#测试是否能自动部署" class="headerlink" title="测试是否能自动部署"></a>测试是否能自动部署</h2><h3 id="为开发的本地仓库添加remote源"><a href="#为开发的本地仓库添加remote源" class="headerlink" title="为开发的本地仓库添加remote源"></a>为开发的本地仓库添加remote源</h3><p>这个客户端本地仓库，即开发的机子的本地仓库，添加remote源，以后往这个remote push代码时，就会自动触发上面的脚本。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$   git remote add deploy user@ip:/gitrepo_dir</div><div class="line">$   git push deploy master</div></pre></td></tr></table></figure></p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>在开发机上浏览项目：<br><img src="git-hooks/1480143666707_2.png" alt="第一次push"></p>
<h3 id="修改后再测试"><a href="#修改后再测试" class="headerlink" title="修改后再测试"></a>修改后再测试</h3><p>在 <code>index.php</code> 中添加一句 <code>echo &quot;这是第二次push &lt;br /&gt;&quot;;</code>。然后像平时一样，commit，push到代码仓库中（该仓库是origin而不是deploy，是平时托管代码的仓库，如github等），再push到deploy仓库中。<br>根据返回的信息，可以看出，远程服务器中已经部署成功了。<br>再次刷新浏览器，可以看到网页已经被修改了。<br><img src="git-hooks/1480143667371_3.png" alt="修改后再测试"></p>
<p>好了，一个简单的自动部署PHP项目的教程就到这了。其实，通过合理的设置 git hooks 可以实现很多功能，大家可以去慢慢挖掘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近正在寻找一种简便的自动部署代码到服务器的方式，然后就发现了git hooks这个方法，查了一些资料再自己尝试过后，觉得还不错，记录下。&lt;br&gt;
    
    </summary>
    
    
      <category term="php" scheme="http://blog.leungjz.top/tags/php/"/>
    
      <category term="git" scheme="http://blog.leungjz.top/tags/git/"/>
    
      <category term="deploy" scheme="http://blog.leungjz.top/tags/deploy/"/>
    
  </entry>
  
  <entry>
    <title>使用Vue1.0 + webpack 实现SPA</title>
    <link href="http://blog.leungjz.top/2016/10/16/vue-cli-demo/"/>
    <id>http://blog.leungjz.top/2016/10/16/vue-cli-demo/</id>
    <published>2016-10-16T07:54:05.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司一直在催开发，导致基本没时间记录下学习的过程了。刚好有个小项目需要用到Vue，于是顺便学习下使用 vue-cli + webpack 来进行单页面应用开发。<br><a id="more"></a><br>趁着稍微有一点点时间，就简单记录一下开发的过程（文中的应用为CNode的单页面应用，API数据均由CNode提供）。</p>
<ol>
<li>安装基本工具<br>在控制台中输入 <code>npm i -g vue-cli webpack</code><br>安装成功后显示如下图：</li>
<li><p>新建项目</p>
<ol>
<li>先进入工作区间 <code>cd /your/workspace</code></li>
<li>新建 vue1.0 的项目 <code>vue init webpack#1.0 your-project-name</code> 并进入项目目录 <code>cd your-project-name</code><br><img src="vue-cli-demo/1.png" alt="vue init webpack#1.0 vue-cnode"><br>在新建项目时，需要输入的参数有：</li>
</ol>
<ul>
<li>项目名</li>
<li>项目的描述</li>
<li>坐着</li>
<li>是否使用ESLint进行校验（因为不喜欢2个空格的tab所以我选择了不校验）</li>
<li>是否使用 karma 和 mocha 进行测试（不熟悉，所以先不是用）</li>
<li>这一行不懂，所以跳过</li>
</ul>
<ol>
<li>安装相关依赖 <code>npm i</code></li>
<li>运行项目 <code>npm run dev</code><br><img src="vue-cli-demo/2.png" alt="npm run dev"><br><img src="vue-cli-demo/3.png" alt="hello vue"><br>到现在我们已经成功搭好了vue的脚手架了。接下来是整个项目中比较难的部分了。</li>
</ol>
</li>
<li><p>webpack 配置<br>webpack的思想是把每个静态资源文件当做一个模块加载，我们需要做一些配置，在这里我们需要用到编译sass模块，多以我们还需要安装<code>css-loader</code>,<code>style-loader</code>,<code>node-sass</code>。<br><strong>安装推荐使用 <code>npm i --save modules</code> 命令安装</strong></p>
<p>同时还需要让webpack自动添加css前缀因此需要安装<code>autoprefixer-loader</code>。安装完成后，修改webpack的辅助工具（我的路径是<code>build/utils.js</code>）中的 <code>cssLoader</code> 配置：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">css</span>: generateLoaders([<span class="string">'css'</span>, <span class="string">'autoprefixer'</span>]),</div><div class="line">    <span class="comment">// other loader.</span></div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>下面是部分webpack配置文件的注解（如有错误请提出）：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</div><div class="line"><span class="keyword">var</span> config = <span class="built_in">require</span>(<span class="string">'../config'</span>)</div><div class="line"><span class="keyword">var</span> utils = <span class="built_in">require</span>(<span class="string">'./utils'</span>)</div><div class="line"><span class="keyword">var</span> projectRoot = path.resolve(__dirname, <span class="string">'../'</span>)</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="comment">//入口文件</span></div><div class="line">    entry: &#123;</div><div class="line">        <span class="attr">app</span>: <span class="string">'./src/main.js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="comment">//输出配置</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="comment">//输出路径，绝对路径。</span></div><div class="line">        path: config.build.assetsRoot,</div><div class="line">        <span class="comment">//公共文件生成路径</span></div><div class="line">        publicPath: process.env.NODE_ENV === <span class="string">'production'</span> ? config.build.assetsPublicPath : config.dev.assetsPublicPath,</div><div class="line">        <span class="comment">//文件名</span></div><div class="line">        filename: <span class="string">'[name].js'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">resolve</span>: &#123;</div><div class="line">        <span class="comment">//导入包时可以省略的文件后缀，导入 ./components/home.vue 时可以直接导入 ./components/home</span></div><div class="line">        extensions: [<span class="string">''</span>, <span class="string">'.js'</span>, <span class="string">'.vue'</span>],</div><div class="line">        <span class="comment">//路径别名，可以使用别名代替，导入 ./components/home 时可以直接导入 components/home</span></div><div class="line">        alias: &#123;</div><div class="line">            <span class="string">'src'</span>: path.resolve(__dirname, <span class="string">'../src'</span>),</div><div class="line">            <span class="string">'assets'</span>: path.resolve(__dirname, <span class="string">'../src/assets'</span>),</div><div class="line">            <span class="string">'components'</span>: path.resolve(__dirname, <span class="string">'../src/components'</span>)</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line"></div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="comment">//加载器</span></div><div class="line">        loaders: [&#123;</div><div class="line">            <span class="comment">//vue文件解析</span></div><div class="line">            test: <span class="regexp">/\.vue$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'vue'</span></div><div class="line">        &#125;, &#123;<span class="comment">//js文件解析</span></div><div class="line">            test: <span class="regexp">/\.js$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'babel'</span>,</div><div class="line">            <span class="attr">include</span>: projectRoot,</div><div class="line">            <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">        &#125;, &#123;<span class="comment">//json文件解析</span></div><div class="line">            test: <span class="regexp">/\.json$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'json'</span></div><div class="line">        &#125;, &#123;<span class="comment">//html文件解析</span></div><div class="line">            test: <span class="regexp">/\.html$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'vue-html'</span></div><div class="line">        &#125;, &#123;<span class="comment">//图片解析</span></div><div class="line">            test: <span class="regexp">/\.(png|jpe?g|gif|svg)(\?.*)?$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'url'</span>,</div><div class="line">            <span class="attr">query</span>: &#123;</div><div class="line">                <span class="comment">//小于10k使用base64格式</span></div><div class="line">                limit: <span class="number">10240</span>,</div><div class="line">                <span class="comment">//图片名称</span></div><div class="line">                name: utils.assetsPath(<span class="string">'img/[name].[hash:7].[ext]'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;, &#123;<span class="comment">//字体</span></div><div class="line">            test: <span class="regexp">/\.(woff2?|eot|ttf|otf)(\?.*)?$/</span>,</div><div class="line">            <span class="attr">loader</span>: <span class="string">'url'</span>,</div><div class="line">            <span class="comment">//小于100k使用base64格式</span></div><div class="line">            query: &#123;</div><div class="line">                <span class="attr">limit</span>: <span class="number">102400</span>,</div><div class="line">                <span class="attr">name</span>: utils.assetsPath(<span class="string">'fonts/[name].[hash:7].[ext]'</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;]</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">vue</span>: &#123;</div><div class="line">        <span class="attr">loaders</span>: utils.cssLoaders()</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>为了测试一下上述 loader 是否有效，修改 <code>Home.vue</code> 中的部分代码：<br>template 部分：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我会旋转.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>style 部分：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">//记得lang要设置为scss</div><div class="line">&lt;style scoped lang="scss"&gt;</div><div class="line">h1 &#123;</div><div class="line">  color: #42b983;</div><div class="line">&#125;</div><div class="line">img&#123;</div><div class="line">    width: 100%;</div><div class="line">&#125;</div><div class="line">.hello&#123;</div><div class="line">    p&#123;</div><div class="line">        color: #999;</div><div class="line">        transform: rotate(30deg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure>
<p>重启测试服务器并打开 <code>localhost:8080</code>可以看到下列效果：<br><img src="vue-cli-demo/4.png" alt="显示效果"><br>打开控制台查看css样式时，发现已经自动添加了前缀。<br><img src="vue-cli-demo/5.png" alt="css 已经被自动添加了浏览器前缀"><br>到此为止，webpack 的配置可以告一段落了，下面可以开始开发我们的应用。</p>
</li>
<li><p>实现demo</p>
<ol>
<li><p>使用路由插件 <code>vue-router</code><br>安装插件： <code>npm i --save
vue-router@0.7.3</code>。此处使用0.7.3版本的原因是新版的插件（2.0版本以上）都只支持vue2.0版本，因此我们使用支持vue1.0的最新版。</p>
<blockquote>
<p>注意: vue-router@2.x 只适用于 Vue 2.x 版本。</p>
</blockquote>
<p>然后我们需要修改入口文件 <code>main.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App'</span></div><div class="line"><span class="comment">//导入并注册vue-router插件</span></div><div class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span>;</div><div class="line">Vue.use(VueRouter);</div><div class="line"></div><div class="line"><span class="comment">//导入两个页面</span></div><div class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'components/Home'</span>;</div><div class="line"><span class="keyword">import</span> Test <span class="keyword">from</span> <span class="string">'components/test'</span>;</div><div class="line"><span class="comment">//新建一个路由</span></div><div class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter();</div><div class="line"><span class="comment">//定义路由跳转地址</span></div><div class="line">router.map(&#123;</div><div class="line">    <span class="string">'/home'</span>: &#123;</div><div class="line">        <span class="attr">component</span>: Home</div><div class="line">    &#125;,</div><div class="line">    <span class="string">'/test'</span>: &#123;</div><div class="line">        <span class="attr">component</span>: Test</div><div class="line">    &#125;</div><div class="line">&#125;)</div><div class="line"><span class="comment">//设置未定义路由跳转的页面</span></div><div class="line">router.redirect(&#123;</div><div class="line">    <span class="comment">//所有未定义的路由都跳转到根目录</span></div><div class="line">    <span class="string">'*'</span>: <span class="string">'/home'</span>,</div><div class="line">    <span class="string">'/'</span>: <span class="string">'/home'</span></div><div class="line">&#125;)</div><div class="line"><span class="comment">//开启路由</span></div><div class="line">router.start(App, <span class="string">'#app'</span>);</div></pre></td></tr></table></figure>
<p>在components下新建两个页面：<br><code>Home.vue</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"hello"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data () &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="comment">//提示，修改该行不会触发热更新，因为更新组件会对当前状态和初始状态进行对比。</span></div><div class="line">        msg: <span class="string">'Hello World!'</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 添加 scope 属性可以限制这些style的作用域，仅在该组件中生效 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line">h1 &#123;</div><div class="line">  color: #42b983;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>test.vue</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">lang</span>=<span class="string">"html"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">        &#123;&#123;msg&#125;&#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">  data() &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">        <span class="attr">msg</span>: <span class="string">'From test.vue!'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">computed</span>: &#123;&#125;,</div><div class="line">  mounted() &#123;&#125;,</div><div class="line">  <span class="attr">methods</span>: &#123;&#125;,</div><div class="line">  <span class="attr">components</span>: &#123;&#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span> <span class="attr">scoped</span>&gt;</span><span class="undefined"></span></div><div class="line">    p&#123;</div><div class="line">        color: red;</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>再修改一下 <code>app.vue</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Router-view<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123;path:'/home', activeClass:'active'&#125;"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">v-link</span>=<span class="string">"&#123;path:'/test', activeClass:'active'&#125;"</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">keep-alive</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line"><span class="keyword">import</span> Hello <span class="keyword">from</span> <span class="string">'./components/Hello'</span></div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'App'</span></div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"scss"</span>&gt;</span><span class="undefined"></span></div><div class="line">p&#123;</div><div class="line">    color: blue;</div><div class="line">&#125;</div><div class="line">a&#123;</div><div class="line">    color: #ddd;</div><div class="line">    &amp;.active&#123;</div><div class="line">        color: #333;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<p>保存所有修改的文件，可以在浏览器中看到效果：<br><img src="vue-cli-demo/6.png" alt=""><br><img src="vue-cli-demo/7.png" alt=""><br>可以发现，每个style均在自己的作用域中生效，而且不同的路径对应不同的页面。</p>
</li>
<li><p>使用 <code>vue-resource</code> 插件请求数据<br>页面有了，我们先来使用 <code>vue-resource</code> 插件来向服务器请求数据，并将数据显示在页面中。<br>在 <code>main.js</code> 中导入插件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> VueResource <span class="keyword">from</span> <span class="string">'vue-resource'</span>;</div><div class="line">Vue.use(VueResource);</div></pre></td></tr></table></figure>
<p>考虑到在之后会频繁使用到请求，因此可以将所有的请求都封装到一个文件中，使用的时候再导入即可。<br>新建 <code>utils</code> 文件，并新建 <code>request.js</code> 文件：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    getTopics(callback, params)&#123;</div><div class="line">        !params &amp;&amp; (params = &#123;&#125;);</div><div class="line">        Vue.http(&#123;</div><div class="line">            <span class="attr">url</span>: <span class="string">'https://cnodejs.org/api/v1/topics'</span>,</div><div class="line">            <span class="attr">params</span>: params,</div><div class="line">            <span class="attr">method</span>: <span class="string">'GET'</span></div><div class="line">        &#125;).then(callback);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在 <code>Home.vue</code> 文件中添加：<br><code>template</code>:</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"topics"</span> <span class="attr">v-for</span>=<span class="string">"topic in topics"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>&#123;&#123;topic.title&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">small</span>&gt;</span>&#123;&#123;topic.create_at | parseDate&#125;&#125;<span class="tag">&lt;/<span class="name">small</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>script</code>:</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="comment">//导入请求数据的辅助函数</span></div><div class="line"><span class="keyword">import</span> Topics <span class="keyword">from</span> <span class="string">'../utils/request'</span>;</div><div class="line"></div><div class="line"><span class="comment">//添加一个自定义过滤器，用于格式化时间</span></div><div class="line">Vue.filter(<span class="string">'parseDate'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">input</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>(input);</div><div class="line">    <span class="keyword">var</span> formatter = <span class="string">'YYYY-MM-DD HH:mm'</span>;</div><div class="line">    <span class="keyword">return</span> formatter.replace(<span class="string">'YYYY'</span>, date.getFullYear())</div><div class="line">                    .replace(<span class="string">'MM'</span>, date.getMonth())</div><div class="line">                    .replace(<span class="string">'DD'</span>, date.getDate())</div><div class="line">                    .replace(<span class="string">'HH'</span>, date.getHours())</div><div class="line">                    .replace(<span class="string">'mm'</span>, date.getMinutes())</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    data () &#123;</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">            <span class="comment">//提示，修改该行不会触发热更新，因为更新组件会对当前状态和初始状态进行对比。</span></div><div class="line">            msg: <span class="string">'Hello CNode!'</span>,</div><div class="line">            <span class="comment">//初始化topics数组</span></div><div class="line">            topics: []</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    attached()&#123;</div><div class="line">        Topics.getTopics(<span class="function">(<span class="params">responce</span>)=&gt;</span>&#123;</div><div class="line">            <span class="keyword">var</span> responceData = responce.body</div><div class="line">            <span class="keyword">this</span>.$set(<span class="string">'topics'</span>, responceData.data);</div><div class="line">        &#125;)</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>重新打开浏览器可以看到：<br><img src="vue-cli-demo/8.png" alt="请求成功"><br>可以看到，数据已经从后台请求回来了。接下来可以对数据进行开发，优化等。</p>
</li>
</ol>
</li>
<li><p>结语<br>憋了好久了，终于写完了一个简易的基于vue1.0+webpack的教程了。下面的GitHub链接是最终实现的demo（实现了显示获取首页数据，文章详细内容，文章的评论等），该demo还有很多需要优化的改善的地方，我会慢慢地进行完善了，欢迎各位进行star。</p>
<p><a href="https://github.com/JZLeung/Vue-CNode" target="_blank" rel="external">GitHub传送门</a><br>小demo展示（使用了<code>vue-material-components</code>）：<br><img src="vue-cli-demo/9.gif" alt=""></p>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司一直在催开发，导致基本没时间记录下学习的过程了。刚好有个小项目需要用到Vue，于是顺便学习下使用 vue-cli + webpack 来进行单页面应用开发。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.leungjz.top/tags/javascript/"/>
    
      <category term="vue" scheme="http://blog.leungjz.top/tags/vue/"/>
    
      <category term="webpack" scheme="http://blog.leungjz.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Mongoose - 在 NodeJs 中优雅地建立 MongoDb 对象模型</title>
    <link href="http://blog.leungjz.top/2016/08/13/mongoose-guide/"/>
    <id>http://blog.leungjz.top/2016/08/13/mongoose-guide/</id>
    <published>2016-08-13T09:07:15.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>在 NodeJs 中写 MongoDb 的校验，构造和业务逻辑简直是一种拖累。这就是为什么我们写了 Mongoose。<br><a id="more"></a></p>
<h2 id="什么是-MongoDb-和-Mongoose"><a href="#什么是-MongoDb-和-Mongoose" class="headerlink" title="什么是 MongoDb 和 Mongoose"></a>什么是 MongoDb 和 Mongoose</h2><p>MongoDb</p>
<blockquote>
<p>MongoDB is an open-source document database that provides high performance, high availability, and automatic scaling.</p>
<p>MongoDb 是一个开源的文档数据库，可提供高性能，高可用性和自动缩放。</p>
</blockquote>
<p>MongoDB 是一个基于分布式文件存储的数据库。由 C++ 语言编写。旨在为 WEB 应用提供可扩展的高性能数据存储解决方案。</p>
<p>MongoDB 是一个介于关系数据库和非关系数据库之间的产品，是非关系数据库当中功能最丰富，最像关系数据库的。</p>
<p>Mongoose</p>
<blockquote>
<p>Mongoose provides a straight-forward, schema-based solution to model your application data. It includes built-in type casting, validation, query building, business logic hooks and more, out of the box.</p>
<p>Mongoose 为你的应用程序数据提供了一个直接的，基于模型的解决方案。他包括内置的类型转换，校验，建立查询，业务逻辑的钩子等。</p>
<p>Mongoose是一个提供了MongoDB地相映射的Node.js库，它在Node.js中与ORM（Object Relational Mapping）有着类似的接口。如果你不熟悉ORM或者Mongoose中的Object Data Mapping（ODM），意思是Mongoose将数据库中的数据转换为JavaScript对象以供你在应用中使用。</p>
</blockquote>
<h2 id="为什么使用-Mongoose"><a href="#为什么使用-Mongoose" class="headerlink" title="为什么使用 Mongoose"></a>为什么使用 Mongoose</h2><blockquote>
<p>Let’s face it, writing MongoDB validation, casting and business logic boilerplate is a drag</p>
</blockquote>
<h2 id="安装和使用-Mongoose"><a href="#安装和使用-Mongoose" class="headerlink" title="安装和使用 Mongoose"></a>安装和使用 Mongoose</h2><ol>
<li>安装<br><code>$ npm install mongoose --save-dev</code></li>
<li><p>使用<br><code>$ touch index.js</code></p>
<p>在 <code>index.js</code> 文件中引入 <code>Mongoose</code> ，并连接数据库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var mongoose = require(&apos;mongoose&apos;); mongoose.connect(&apos;mongodb://localhost/myblog&apos;);//连接上 myblog 数据库</div></pre></td></tr></table></figure>
</li>
</ol>
<p><strong>开始使用 Mongoose 操作 MongoDb</strong></p>
<p><strong>注：本文默认已经搭好 Nodejs 和 MongoDb 环境，若未搭建环境，请移步至 -&gt; 还在编写当中</strong></p>
<p>假设我们在构建一个博客，需要将博文存储至数据库中。<br>而每一篇博文的结构如下：<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">    title: '标题',</div><div class="line">    author: '作者',</div><div class="line">    date: '时间',</div><div class="line">    comments: '评论',</div><div class="line">    tags: '标签',</div><div class="line">    body: '正文'</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>OK, Go！</strong></p>
<p><strong>Mongoose 中的 Schema 和 Model</strong></p>
<p>在使用 Mongoose 前，先了解一下 Mongoose 中的 Schema 和 Model。</p>
<ul>
<li><p>Schema<br>  在使用 Mongoose 前，先了解一下 Mongoose 中的 Schema 和 Model。</p>
<blockquote>
<p>Everything in Mongoose starts with a Schema. Each schema maps to a MongoDB collection and defines the shape of the documents within that collection.</p>
<p>在 Mongoose 中，所有东西都从一个 Schema 开始。每一个 schema 都映射到一个 MongoDb 的集合，并定义了该集合中的文档的形式。</p>
</blockquote>
<p>  定义一个 Schema：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</div><div class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">pass</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">email</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">createTime</span>: <span class="built_in">Date</span>,</div><div class="line">    <span class="attr">lastLogin</span>: <span class="built_in">Date</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>  Schema 中的每一个键都定义了一个文档的一个属性。在上面的例子中，我们定义了用户名 <code>name</code> ，它会被映射为 String 的 Schema 类</p>
<p>  型，注册时间 <code>createTime</code> 会被映射为 Date 的 Schema 类型。</p>
<p>  允许的 Schema 类型有：（<a href="http://mongoosejs.com/docs/schematypes.html" target="_blank" rel="external">了解更多</a>）</p>
<ul>
<li>String</li>
<li>Number</li>
<li>Date</li>
<li>Buffer</li>
<li>Boolean</li>
<li>Mixed</li>
<li>ObjectId</li>
<li><p>Array</p>
<p>用法：</p>
</li>
<li><p>自定义方法<br>  模型的实例都是一个个的文档，文档中自带许多方法。同时，我们也可以定义我们自己的方法。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">pass</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">email</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">createTime</span>: <span class="built_in">Date</span>,</div><div class="line">    <span class="attr">lastLogin</span>: <span class="built_in">Date</span>，</div><div class="line">    type: <span class="built_in">String</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//根据该用户的类型区查找该类型下的所有用户</span></div><div class="line">userSchema.methods.findUsersByType = <span class="function"><span class="keyword">function</span>(<span class="params">name, cb</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.find(&#123;<span class="attr">type</span>: <span class="keyword">this</span>.type&#125;, cb);</div><div class="line">&#125;</div><div class="line"><span class="comment">//新建模型</span></div><div class="line"><span class="keyword">var</span> User = mongoose.model(<span class="string">'User'</span>, userSchema);</div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="keyword">var</span> newUser = <span class="keyword">new</span> User(&#123;...&#125;);</div><div class="line">newUser.findUsersByType(<span class="function"><span class="keyword">function</span>(<span class="params">err, users</span>)</span>&#123;</div><div class="line">    err &amp;&amp; <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(users);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  这样就向 <code>User</code> 的实例添加了一个自定义的方法。</p>
</li>
<li><p>静态方法<br>  同样的，向模型中添加自定义方法也是很简单。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">userSchema.statics.findUsersByName = <span class="function"><span class="keyword">function</span>(<span class="params">name, cb</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.find(&#123;<span class="attr">name</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(name, <span class="string">"ig"</span>)&#125;, cb);</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用</span></div><div class="line">User.findUsersByName(<span class="string">'leung'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, users</span>)</span>&#123;</div><div class="line">    err &amp;&amp; <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(users);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>查询辅助<br>  可以自定义一个查询的辅助函数，它和实体的方法类似，但是供 Mongoose 查询使用。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">userSchema.query.byName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.find(&#123;<span class="attr">name</span>: <span class="keyword">new</span> <span class="built_in">RegExp</span>(name, <span class="string">"ig"</span>)&#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//使用</span></div><div class="line">userSchema.find().byName(<span class="string">'leung'</span>).exec(<span class="function"><span class="keyword">function</span>(<span class="params">err, users</span>)</span>&#123;</div><div class="line">    err &amp;&amp; <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(users);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>索引<br>  MongoDb 支持第二个索引，在使用 Mongoose 的时候，可以在定义 Schema 的时候定义索引。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//定义方法1</span></div><div class="line"><span class="keyword">var</span> userSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">pass</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">email</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">createTime</span>: &#123;<span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">index</span>: <span class="literal">true</span>&#125;,</div><div class="line">    <span class="attr">lastLogin</span>: &#123;<span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">index</span>: <span class="literal">true</span>&#125;,</div><div class="line">    <span class="attr">type</span>: <span class="built_in">String</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//定义方法2</span></div><div class="line">userSchema.index(&#123; <span class="attr">createTime</span>: <span class="number">1</span>, <span class="attr">lastLogin</span>: <span class="number">-1</span> &#125;);</div></pre></td></tr></table></figure>
<p>  Mongoose 会在程序启动的时候，对于每个定义了索引的字段自动调用 <code>ensureIndex</code> 函数。当在不需要这些索引的时候，可以使用下列 4 种方式关闭索引。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mongoose.connect(<span class="string">'mongodb://user:pass@localhost:port/database'</span>, &#123; <span class="attr">config</span>: &#123; <span class="attr">autoIndex</span>: <span class="literal">false</span> &#125; &#125;);</div><div class="line"><span class="comment">// or</span></div><div class="line">mongoose.createConnection(<span class="string">'mongodb://user:pass@localhost:port/database'</span>, &#123; <span class="attr">config</span>: &#123; <span class="attr">autoIndex</span>: <span class="literal">false</span> &#125; &#125;);</div><div class="line"><span class="comment">// or</span></div><div class="line">userSchema.set(<span class="string">'autoIndex'</span>, <span class="literal">false</span>);</div><div class="line"><span class="comment">// or</span></div><div class="line"><span class="keyword">new</span> Schema(&#123;..&#125;, &#123; <span class="attr">autoIndex</span>: <span class="literal">false</span> &#125;);</div></pre></td></tr></table></figure>
</li>
<li><p>虚拟字段<br>  虚拟字段可以让你很方便的在文档中存取，但是不会写入数据库中。getter 方法在格式化或者合并字段的时候很有用，而 setter 方法则在反格式化或者时将多个值合并的时候有用。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> personSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">name</span>:&#123;</div><div class="line">        <span class="attr">firstName</span>: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">lastName</span>: <span class="built_in">String</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema);</div><div class="line"><span class="comment">//定义虚拟字段 fullName</span></div><div class="line">personSchema.virtual(<span class="string">'name.fullName'</span>).get(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.name.lastName;</div><div class="line">&#125;)</div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Person(&#123;<span class="attr">name</span>: &#123;<span class="attr">firstName</span>: <span class="string">'zhong'</span>, <span class="attr">lastName</span>: <span class="string">'Lueng'</span>&#125;&#125;);</div><div class="line"><span class="built_in">console</span>.log(me);</div><div class="line"><span class="built_in">console</span>.log(me.name.fullName) <span class="comment">//zhong Lueng</span></div></pre></td></tr></table></figure>
<p>  虚拟字段的 setter 方法会在其他校验前使用，因此，即使字段时必须的，虚拟字段也会正常执行。</p>
<p>  <strong>只用非虚拟字段才可以在查询或者字段选择中使用。</strong></p>
</li>
<li><p>配置项<br>  Schema 有许多可配置的配置项，可以在新建 Schema 时或者直接设置。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> Schema(&#123;..&#125;, options);</div><div class="line"><span class="comment">//or</span></div><div class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> Schema(&#123;..&#125;);</div><div class="line">schema.set(option, value);</div></pre></td></tr></table></figure>
<p>  有效的配置项：</p>
<ul>
<li><code>autoIndex</code></li>
<li><code>capped</code></li>
<li><code>collection</code></li>
<li><code>emitIndexErrors</code></li>
<li><code>id</code></li>
<li><code>_id</code></li>
<li><code>minimize</code></li>
<li><code>read</code></li>
<li><code>safe</code></li>
<li><code>shardKey</code></li>
<li><code>strict</code></li>
<li><code>toJSON</code></li>
<li><code>toObject</code></li>
<li><code>typeKey</code></li>
<li><code>validateBeforeSave</code></li>
<li><code>versionKey</code></li>
<li><code>skipVersioning</code></li>
<li><code>timestamps</code></li>
</ul>
</li>
</ul>
</li>
<li><p>Model<br>  在 Mongoose 中，模型是通过已定义的 Schema 生成，这些模型的实例可以保存并检索数据库中的文档。数据库中的所有文档都是通过模型来创建和检索。</p>
<ul>
<li><p>创建文档<br>  文档是模型的实例，创建文档和将其保存到数据库中是非常简单的：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> animalSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">type</span>: <span class="built_in">String</span></div><div class="line">&#125;);</div><div class="line"><span class="keyword">var</span> Animal = mongoose.model(<span class="string">'Animal'</span>, animalSchema);</div><div class="line"><span class="keyword">var</span> cat = <span class="keyword">new</span> Animal(&#123;<span class="attr">type</span>: <span class="string">'cat'</span>&#125;);</div><div class="line">cat.save(<span class="function">(<span class="params">err, doc</span>) =&gt;</span>&#123;</div><div class="line">    err &amp;&amp; <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'doc is saved'</span>);<span class="comment">//saved</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">// or</span></div><div class="line">Animal.create(&#123;<span class="attr">type</span>: <span class="string">'cat'</span>&#125;, (err, doc) =&gt;&#123;</div><div class="line">    err &amp;&amp; <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="comment">//saved!</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>查询文档<br>  在 Mongoose 中查询文档是很方便的，同时支持 MongoDb 原生语法，模型中有许多内置的静态函数： <code>find</code> , <code>where</code> , <code>findById</code> , <code>findOne</code> 等等， 也支持链式调用。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Animal.find(&#123;<span class="attr">type</span>: <span class="string">'dog'</span>&#125;).where(<span class="string">'age'</span>).gt(<span class="number">2</span>).limit(<span class="number">10</span>).exec();</div></pre></td></tr></table></figure>
</li>
<li><p>移除文档<br>  每个模型都有一个默认的移除方法，可以移除所有符合搜索条件的文档。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Animal.remove(&#123;<span class="attr">type</span>: <span class="string">'dongbeihu'</span>&#125;, (err, res)&#123;</div><div class="line">    err &amp;&amp; <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="comment">//removed!</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>更新文档<br>  每个模型都有他自己的更新方法，供更新数据库中所有符合条件的文档，同时不返回任何东西。</p>
<p>  <strong>如果需要更新单个文档，并且返回更新后的文档，请使用 <code>findOneAndUpdate</code></strong></p>
</li>
</ul>
</li>
</ul>
<p>下面可开始使用 Mongoose 来操作 MongoDb 数据库了。</p>
<ol>
<li><p>创建博文的 Schema</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Schema = mongoose.Schema;</div><div class="line"><span class="keyword">var</span> blogSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line">    <span class="attr">title</span>: <span class="built_in">String</span>,          <span class="comment">//标题</span></div><div class="line">    author: <span class="built_in">String</span>,         <span class="comment">//作者</span></div><div class="line">    body: <span class="built_in">String</span>,           <span class="comment">//正文</span></div><div class="line">    comments: [&#123;            <span class="comment">//评论</span></div><div class="line">        author: <span class="built_in">String</span>,</div><div class="line">        <span class="attr">date</span>: <span class="built_in">Date</span>,</div><div class="line">        <span class="attr">body</span>: <span class="built_in">String</span></div><div class="line">    &#125;],</div><div class="line">    <span class="attr">date</span>: &#123;<span class="attr">type</span>: <span class="built_in">Date</span>, <span class="attr">default</span>: <span class="built_in">Date</span>.now&#125;,  <span class="comment">//发布时间</span></div><div class="line">    isDelete: <span class="built_in">Boolean</span>,                        <span class="comment">//是否删除</span></div><div class="line">    tags: [&#123;<span class="attr">type</span>: <span class="built_in">String</span>&#125;]                  <span class="comment">//标签</span></div><div class="line">&#125;, &#123;<span class="attr">collection</span>: <span class="string">'blog'</span>&#125;);   <span class="comment">//选择 blog 集合</span></div></pre></td></tr></table></figure>
</li>
<li><p>创建一个 Blog 模型<br> 创建了一个模型之后，我们就可以通过模型去创建新的文档或者去操作数据库。</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Blog = mongoose.model(<span class="string">'Blog'</span>, blogSchema);</div></pre></td></tr></table></figure>
</li>
<li><p>创建一个新的实体对象<br> <strong>这里的所有数据都是通过 Mockjs 进行模拟。详情移步至 <a href="http://mockjs.com/" target="_blank" rel="external">Mockjs 官网</a></strong><br> 使用 mockjs 模拟真实数据</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Mock = <span class="built_in">require</span>(<span class="string">'mockjs'</span>);</div><div class="line"><span class="keyword">var</span> Random = Mock.Random;</div><div class="line">exports.getBlog = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> blog = &#123;</div><div class="line">        <span class="attr">title</span>: Random.ctitle(<span class="number">3</span>,<span class="number">10</span>),         <span class="comment">//随机生成一个长度3-10之间的中文标题</span></div><div class="line">        author: Random.cword(<span class="number">2</span>,<span class="number">3</span>),          <span class="comment">//随机生成一个长度2-3之间的中文单词</span></div><div class="line">        body: Random.cparagraph(<span class="number">1</span>,<span class="number">3</span>),       <span class="comment">//随机生成1-3段中文段落</span></div><div class="line">        comments: [],</div><div class="line">        <span class="attr">date</span>: Random.datetime(<span class="string">'yyyy-MM-dd HH:mm'</span>),  <span class="comment">//随机生成一个时间点</span></div><div class="line">        tags: []</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> length =~~(<span class="built_in">Math</span>.random()*<span class="number">10</span>) +<span class="number">5</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</div><div class="line">        blog.comments.push(Mock.mock(&#123;</div><div class="line">                    <span class="attr">author</span>: Random.cword(<span class="number">2</span>,<span class="number">3</span>),      <span class="comment">//随机生成一条评论的作者名字</span></div><div class="line">                    body: Random.cparagraph(<span class="number">1</span>,<span class="number">3</span>),   <span class="comment">//随机生成一条评论的内容</span></div><div class="line">                    date: Random.datetime(<span class="string">'yyyy-MM-dd HH:mm'</span>)   <span class="comment">//随机生成评论的时间点</span></div><div class="line">                &#125;))</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> length2 =~~(<span class="built_in">Math</span>.random()*<span class="number">4</span>) +<span class="number">2</span>;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length2; i++) &#123;             <span class="comment">//随机加入几个标签</span></div><div class="line">        <span class="keyword">var</span> tag = Random.pick([<span class="string">'nodejs'</span>,<span class="string">'js'</span>,<span class="string">'html'</span>,<span class="string">'css'</span>,<span class="string">'java'</span>,<span class="string">'php'</span>,<span class="string">'python'</span>]);</div><div class="line">        <span class="keyword">if</span>(blog.tags.indexOf(tag) == <span class="number">-1</span>) blog.tags.push(tag)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> blog;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> 生成一个 blog 实体对象</p>
 <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newBlog = <span class="built_in">require</span>(<span class="string">'./blog'</span>)；        <span class="comment">//导入随机生成数据的模块</span></div><div class="line"><span class="keyword">var</span> blogObj = newBlog.getBlog();</div><div class="line"><span class="keyword">var</span> blog = <span class="keyword">new</span> Blog(blogObj)  <span class="comment">//将随机生成的数据转换成为 blog 模型的实体。</span></div><div class="line"><span class="comment">//生成实体对象的另一种方法.</span></div><div class="line"><span class="comment">//此方法相当于创建了一个实体并写入数据库，再返回一个 promise 对象。</span></div><div class="line"><span class="comment">//var blog2 = Blog.create(blogObj);</span></div></pre></td></tr></table></figure>
</li>
<li><p>数据库的 CRUD</p>
<ul>
<li><p>create<br>  基于实体对象: <code>Entity.save(callback)</code>;</p>
<p>  Example:</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> blogObj = newBlog.getBlog();</div><div class="line"><span class="keyword">var</span> blog = <span class="keyword">new</span> Blog(blogObj)</div><div class="line">blog.save(<span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(doc);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//&#123;title: '...', author: '...'&#125;</span></div></pre></td></tr></table></figure>
<p>  结果：<br>  <img src="mongoose-guide/entity,save.png" alt=""><br>  基于模型： <code>Model.create(Obj, callback)</code></p>
<p>  Example:</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Blog.create(blogObj, (err, doc) =&gt; &#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(doc);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//&#123;title: '...', author: '...'&#125;</span></div></pre></td></tr></table></figure>
<p>  结果：<br>  <img src="mongoose-guide/model.create.png" alt=""></p>
</li>
<li><p>delete<br>  基于实体对象：<code>Entity.remove(cb)</code></p>
<p>  基于模型：<code>Model.remove(query, cb)</code></p>
</li>
<li><p>update<br>  基于实体对象：<code>Entity.update(cb)</code></p>
<p>  Example:</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> blog = <span class="keyword">new</span> Blog(blogObj);</div><div class="line">blog.save(<span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;   <span class="comment">//先添加新的博文</span></div><div class="line">    <span class="keyword">if</span>(err) <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Entity.save()'</span>);</div><div class="line">    <span class="built_in">console</span>.log(doc);</div><div class="line">    <span class="comment">//通过实体直接更新博文</span></div><div class="line">    blog.update(&#123;<span class="attr">$set</span>: &#123;<span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>(), <span class="attr">title</span>: <span class="string">'Update From Mongoose'</span>&#125;&#125;, (err2, doc) =&gt; &#123;</div><div class="line">        <span class="keyword">if</span>(err2) <span class="keyword">return</span> <span class="built_in">console</span>.error(err2);</div><div class="line">        <span class="built_in">console</span>.log(doc);</div><div class="line">    &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  结果：<br>  <img src="mongoose-guide/entity.update.png" alt=""><br>  更新后在 Mongobooster 中的数据<br>  <img src="mongoose-guide/entity.update2.png" alt=""><br>  基于模型：</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Model.update(query, docs, options, cb)</div></pre></td></tr></table></figure>
<p>  参数：</p>
<ul>
<li><code>query</code>：查询条件。</li>
<li><code>docs</code>：需要更新的数据。</li>
<li><code>options</code>：配置项。</li>
<li><p><code>cb</code>：回调。<br>返回：</p>
<p><code>&lt;Qeury&gt; this</code></p>
<p>其中，配置项中有效的配置如下：</p>
</li>
<li><code>safe</code> (boolean) safe mode (defaults to value set in schema (true))</li>
<li><code>upsert</code> (boolean) whether to create the doc if it doesn’t match (false)</li>
<li><code>multi</code> (boolean) whether multiple documents should be updated (false)</li>
<li><code>runValidators</code>: if true, runs update validators on this command. Update validators validate the update operation against the model’s schema.</li>
<li><code>setDefaultsOnInsert</code>: if this and upsert are true, mongoose will apply the defaults specified in the model’s schema if a new document is created. This option only works on MongoDB * &gt;= 2.4 because it relies on MongoDB’s $setOnInsert operator.</li>
<li><code>strict</code> (boolean) overrides the strict option for this update</li>
<li><code>overwrite</code> (boolean) disables update-only mode, allowing you to overwrite the doc (false)</li>
<li><p><code>context</code> (string) if set to ‘query’ and runValidators is on, this will refer to the query in custom validator functions that update * validation runs. Does nothing if runValidators is false.</p>
<p><strong>只有传入 <code>callback</code> 时，所有的更新操作才会被执行</strong></p>
<p>Example：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//以下操作均不会执行</span></div><div class="line"><span class="keyword">var</span> q = Blog.where(&#123;<span class="attr">title</span>: <span class="regexp">/del/g</span>&#125;).update(&#123;<span class="attr">$set</span>: &#123;<span class="attr">comments</span>: []&#125;&#125;);</div><div class="line"><span class="comment">//等同于</span></div><div class="line"><span class="comment">//var q = where(&#123;title: /del/g&#125;).update(&#123;comments: []&#125;);</span></div><div class="line"><span class="comment">//下面三条命令均会执行更新操作。</span></div><div class="line"><span class="comment">//q.exec()</span></div><div class="line"><span class="comment">//q.update(true)</span></div><div class="line"><span class="keyword">var</span> q = Blog.where(&#123;<span class="attr">title</span>: <span class="regexp">/del/g</span>&#125;).update(&#123;<span class="attr">$set</span>: &#123;<span class="attr">comments</span>: []&#125;&#125;, (err) =&gt; &#123;</div><div class="line">    <span class="comment">//executes</span></div><div class="line">&#125;);</div><div class="line"><span class="comment">//将文档重写为空文档</span></div><div class="line"><span class="keyword">var</span> q = Blog.where(&#123; <span class="attr">_id</span>: id &#125;).setOptions(&#123; <span class="attr">overwrite</span>: <span class="literal">true</span> &#125;)</div><div class="line">q.update(&#123; &#125;, callback); <span class="comment">// executes</span></div><div class="line"><span class="comment">//or</span></div><div class="line"><span class="comment">//var q = Blog.update(&#123;_id: id&#125;, &#123;&#125;, &#123;overwrite: true&#125;, callback);</span></div><div class="line"><span class="comment">//将所有博文的创建日期设置为今天</span></div><div class="line">Blog.where()</div><div class="line"> .setOptions(&#123; <span class="attr">multi</span>: <span class="literal">true</span> &#125;)</div><div class="line"> .update(&#123; <span class="attr">$set</span>: &#123; <span class="attr">date</span>: <span class="keyword">new</span> <span class="built_in">Date</span>() &#125;&#125;, callback)</div><div class="line"><span class="comment">//or</span></div><div class="line"><span class="comment">//Blog.update(&#123;&#125;, &#123; $set: &#123; date: new Date() &#125;&#125;, &#123; multi: true &#125;, callback);</span></div></pre></td></tr></table></figure>
<p>批量更新结果：<br><img src="mongoose-guide/model.update.png" alt=""></p>
</li>
</ul>
</li>
<li><p>read(query)<br>  <strong>find 操作包含了许多查询的操作，在这里只介绍最常用的几种查询方法，具体的可以查阅官网的 <a href="http://mongoosejs.com/docs/api.html#query-js" target="_blank" rel="external">API Guide</a></strong></p>
<ul>
<li><p>$where <strong>(注意前面的 $)</strong><br>可以传入一个 javascript 函数或者表达式作为查询条件。</p>
<p>用法：$where(js)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//在数据库中找出作者名字长度为 2 且评论大于 10 条的博文：</span></div><div class="line">Blog</div><div class="line">.$where(<span class="string">'this.comments.length &gt;= 10 &amp;&amp; this.author.length === 3'</span>)</div><div class="line"><span class="comment">//.$where(function()&#123;return this.comments.length &gt;= 10 &amp;&amp; this.author.length === 3;&#125;)</span></div><div class="line">.select(<span class="string">'title author commentSize'</span>)</div><div class="line">.find(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(docs);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>查询结果：<br><img src="mongoose-guide/find.$where.png" alt=""></p>
</li>
<li><p>where<br>指定一个查询字段,供后续的链式调用.字段可以是字符串,也可以时一个完整的查询对象。</p>
<p>用法：<code>where(path, val)</code>，<code>path</code> 可以是字符串或是对象</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查找评论数大于8条,且标题含有叫字的博文</span></div><div class="line">Blog</div><div class="line">.where(<span class="string">'commentSize'</span>).gte(<span class="number">8</span>)</div><div class="line"><span class="comment">//.where(&#123;'commentSize':&#123;gte: 8&#125;&#125;)</span></div><div class="line">.where(<span class="string">'title'</span>, /叫/g)</div><div class="line">.select(<span class="string">'title author commentSize'</span>)</div><div class="line">.find(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(docs);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>查询结果：<br><img src="mongoose-guide/find.where.png" alt=""></p>
</li>
</ul>
</li>
<li><p>all<br>  指定一个 all 的查询条件。all 的使用方法可以查阅 MongoDb <a href="https://docs.mongodb.com/manual/reference/operator/query/all/" target="_blank" rel="external">官方文档</a></p>
<p>  用法： <code>all([path], val)</code>,当只传递一个参数时，查询字段已经在 <code>where</code> 中指定。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询出同时含有 html 和 js 标签的博文</span></div><div class="line">Blog</div><div class="line"><span class="comment">// .where('tags').all(['html', 'js'])</span></div><div class="line">.find().all(<span class="string">'tags'</span>, [<span class="string">'html'</span>, <span class="string">'js'</span>])</div><div class="line">.select(<span class="string">'title author tags'</span>)</div><div class="line">.find(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(docs);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  查询结果：<br>  <img src="mongoose-guide/find.all.png" alt=""></p>
</li>
<li><p>and<br>  指定一个 and 的查询条件。</p>
<p>  用法：<code>and(array)</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查找出标题带有叫字，且含有 js 标签的博文</span></div><div class="line">Blog.find()</div><div class="line">.and([&#123;<span class="attr">title</span>: <span class="regexp">/叫/g</span>&#125;, &#123;<span class="attr">tags</span>: <span class="string">'js'</span>&#125;])</div><div class="line">.select(<span class="string">'title author tags'</span>)</div><div class="line">.find(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(docs);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  查询结果：<br>  <img src="mongoose-guide/find.and.png" alt=""></p>
</li>
<li><p>count<br>  返回符合指定条件的文档个数。</p>
<p>  用法：<code>count(query, callback)</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查找出标题带有叫字，且含有 js 标签的博文</span></div><div class="line">Blog.find()</div><div class="line">.and([&#123;<span class="attr">title</span>: <span class="regexp">/叫/g</span>&#125;, &#123;<span class="attr">tags</span>: <span class="string">'js'</span>&#125;])</div><div class="line">.select(<span class="string">'title author tags'</span>)</div><div class="line">.count(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(docs);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  查询结果：1</p>
</li>
<li><p>limit<br>  指定返回查询条数。</p>
<p>  用法：<code>limit(Number)</code>。</p>
</li>
<li><p>or / nor<br>  指定一组查询条件，只要符合/不符合其中一个条件即可。</p>
<p>  用法：<code>or(array) / nor(array)</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询所有标签包含 js, 或者标题有“叫”字的博文</span></div><div class="line">Blog.find()</div><div class="line">.or([&#123;<span class="attr">title</span>: <span class="regexp">/叫/g</span>&#125;, &#123;<span class="attr">tags</span>: <span class="string">'css'</span>&#125;])</div><div class="line">.select(<span class="string">'title author tags'</span>)</div><div class="line">.find(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(docs);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  查询结果：<br>  <img src="mongoose-guide/find.or.png" alt=""></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查询所有标签不包含 js或者标题不含有“叫”字的博文</span></div><div class="line">Blog.find()</div><div class="line">.nor([&#123;<span class="attr">title</span>: <span class="regexp">/叫/g</span>&#125;, &#123;<span class="attr">tags</span>: <span class="string">'js'</span>&#125;])</div><div class="line">.select(<span class="string">'title author tags'</span>)</div><div class="line">.find(<span class="function">(<span class="params">err, docs</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">if</span>(err) <span class="keyword">return</span> <span class="built_in">console</span>.error(err);</div><div class="line">    <span class="built_in">console</span>.log(docs);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  查询结果：<br>  <img src="mongoose-guide/find.nor.png" alt=""></p>
</li>
<li><p>slice<br>  返回符合指定条件的文档个数。</p>
<p>  用法：<code>slice([path], value)</code></p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查出所有的博文，并显示每个博文的第一个标签。</span></div><div class="line">Blog</div><div class="line">.where(<span class="string">'tags'</span>).slice(<span class="number">1</span>)</div><div class="line">.select(<span class="string">'title'</span>)</div><div class="line">.limit(<span class="number">4</span>)</div><div class="line">.exec(<span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(doc);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  查询结果：<br>  <img src="mongoose-guide/find.slice.png" alt=""></p>
</li>
<li><p>sort<br>  设定排序规则。</p>
<p>  用法：<code>sort(arg)</code>.参数可以是对象，可以是字符串。</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//查出所有的博文，并按照标题排序。</span></div><div class="line">Blog.find()</div><div class="line">.sort(<span class="string">'title'</span>)</div><div class="line"><span class="comment">//.sort(&#123;title: 1&#125;)     //传入对象参数</span></div><div class="line"><span class="comment">//.sort(&#123;title: -1&#125;)    //传入对象参数，标题倒叙</span></div><div class="line"><span class="comment">//.sort('-title')       //传入对象字符串，标题倒叙</span></div><div class="line">.limit(<span class="number">4</span>)</div><div class="line">.exec(<span class="function">(<span class="params">err, doc</span>) =&gt;</span> &#123;</div><div class="line">    <span class="built_in">console</span>.log(doc);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>  查询结果：<br>  <img src="mongoose-guide/find.sort.png" alt=""></p>
</li>
</ul>
</li>
<li><p>validate<br> Mongoose 中，在定义 Schema 的时候，允许用户自定义字段的校验规则。当在 Schema 中定义校验规则的时候，需要遵守下列规则：</p>
<ul>
<li>校验规则需要在 Schema 中定义。</li>
<li>校验会在 <code>save</code> 操作前调用。</li>
<li>可以通过 <code>doc.validate(callback)</code> 和 <code>doc.validateSync()</code> 手动校验。</li>
<li>未定义校验规则的字段将不会校验，除非是 <code>required</code> 必要字段。</li>
<li>校验时异步递归的，当使用 <code>Model.save</code> 时，子文档的校验规则将会立即调用，有错误时，执行的 <code>Model.save</code> 会接收到错误。</li>
<li><p>校验时自定义的。<br>普通的校验定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> personSchema = <span class="keyword">new</span> Schema(&#123;</div><div class="line"><span class="attr">name</span>:&#123;</div><div class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">validate</span>:&#123;</div><div class="line">        <span class="attr">validator</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">            <span class="comment">//只能以字母开头，只能包含英文数字下划线。</span></div><div class="line">            <span class="keyword">return</span> <span class="regexp">/^[a-zA-Z][a-zA-Z0-9_]*$/</span>.test(value);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">message</span>: <span class="string">'&#123;VALUE&#125; is not a valid username. It must begin with a letter.'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">'Username is required'</span>]</div><div class="line">&#125;,</div><div class="line"><span class="attr">phone</span>: &#123;</div><div class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">validate</span>: &#123;</div><div class="line">    <span class="attr">validator</span>: <span class="function"><span class="keyword">function</span>(<span class="params">v</span>) </span>&#123;</div><div class="line">        <span class="comment">//11位电话号码</span></div><div class="line">        <span class="keyword">return</span> <span class="regexp">/\d&#123;11&#125;/</span>.test(v);</div><div class="line">        &#125;,</div><div class="line">        <span class="attr">message</span>: <span class="string">'&#123;VALUE&#125; is not a valid phone number!'</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">required</span>: [<span class="literal">true</span>, <span class="string">'User phone number required'</span>]</div><div class="line">&#125;,</div><div class="line"><span class="attr">gender</span>:&#123;</div><div class="line">    <span class="attr">type</span>: <span class="built_in">String</span>,</div><div class="line">    <span class="attr">enum</span>: &#123;</div><div class="line">        <span class="comment">//只能是男女</span></div><div class="line">        values: [<span class="string">'female'</span>, <span class="string">'male'</span>],</div><div class="line">        <span class="attr">message</span>: <span class="string">'&#123;VALUE&#125; is not a valid gender'</span></div><div class="line">    &#125;,s</div><div class="line">&#125;</div><div class="line">&#125;,&#123;<span class="attr">collection</span>: <span class="string">'person'</span>&#125;)</div><div class="line"><span class="keyword">var</span> Person = mongoose.model(<span class="string">'Person'</span>, personSchema);</div><div class="line"><span class="comment">//测试数据</span></div><div class="line"><span class="keyword">var</span> one = <span class="keyword">new</span> Person(&#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'123'</span>,</div><div class="line">    <span class="attr">phone</span>:<span class="string">'11111'</span>,</div><div class="line">    <span class="attr">gender</span>:<span class="string">' male'</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>我们使用 <code>one.validateSync()</code> 对数据进行验证，其验证结果如下：<br><img src="mongoose-guide/validate-result.png" alt=""><br>Mongoose 中内置的验证如下：</p>
<blockquote>
<ul>
<li>所有的 Schema 都有 required 校验规则，必要校验器会调用 Schema 的 chenckRequired() 函数去校验该字段的值是否符合规则。</li>
<li>Number 类型有 min 和 max。</li>
<li>String 类型有 enum, minlength, maxlength, match的校验器。</li>
</ul>
</blockquote>
</li>
<li><p><code>required</code>：必填校验。<br>可以传入的参数为：<code>boolean[，String]</code>。当只传 <code>true</code> 或者 <code>false</code> 时，用于定义该字段是否为必填；当传入第二个参数 String 时，该信息作为校验失败的错误提示语。</p>
</li>
<li><code>enum</code>：枚举类型校验。<br>  接受参数类型为：<code>Array/ Object</code>。当类型为 <code>Array</code> 时，指定该字段的值必须在该数组中；当传入类型为 <code>Object</code> 时，可以定义两个键值队：<code>values</code> 和 <code>message</code>，<code>values</code> 的类型为 Array，指定字段的值必须在数组 <code>values</code> 中，<code>message</code> 指定校验失败的错误提示语。</li>
<li><code>validator</code>：校验的对象。<br>  该对象包含 2 个键值队：<ul>
<li><code>validate</code> 可以是正则表达式，也可以是一个函数。</li>
<li><code>message</code> 则是错误信息提示语。</li>
</ul>
</li>
<li><code>min ,max</code>：对数字类型的进行大小校验。第二个参数可以为字符串，作为错误提示语。</li>
<li><code>minlength</code> ,<code>maxlength</code>：对字符串类型的进行长度校验。第二个参数可以为字符串，作为错误提示语。</li>
<li><code>match</code>：接受一个正则表达式进行验证。第二个参数可以为字符串，作为错误提示语。</li>
<li><code>trim</code>：字符串在校验时，是否去除前后字符串。默认为 <code>false</code>。</li>
</ul>
</li>
</ol>
<p>使用 Mongoose 的自动校验功能，可以省下许多校验操作。</p>
<p>以前，我们直接使用 Mongodb 去操作数据，每次读取操作都要打开，关闭数据库，但是当网页刷新/访问过于频繁时，就会出现数据库来不及关闭，又开始新的查询，就可能会出现 error。</p>
<p>现在，我们使用 Mongoose，打开数据库的连接之后，db 就会一直处于连接状态，不需要在访问时才打开连接，操作完后关闭连接，Error 也不再出现了。而且，代码的易读性也提高了不少。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在 NodeJs 中写 MongoDb 的校验，构造和业务逻辑简直是一种拖累。这就是为什么我们写了 Mongoose。&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://blog.leungjz.top/tags/nodejs/"/>
    
      <category term="mongodb" scheme="http://blog.leungjz.top/tags/mongodb/"/>
    
      <category term="javascript" scheme="http://blog.leungjz.top/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>Without jQuery:lazyload.js</title>
    <link href="http://blog.leungjz.top/2016/08/05/without-jquery-lazyload-js/"/>
    <id>http://blog.leungjz.top/2016/08/05/without-jquery-lazyload-js/</id>
    <published>2016-08-05T08:32:52.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Without jQuery 系列之：lazyload.js</p>
<p>使用原生的js实现简易的图片延时加载。<br><a id="more"></a></p>
<h2 id="什么是延时加载？"><a href="#什么是延时加载？" class="headerlink" title="什么是延时加载？"></a>什么是延时加载？</h2><blockquote>
<p>图片延迟加载也称 “懒加载”，通常应用于图片比较多的网页</p>
</blockquote>
<h2 id="为什么要使用延时加载？"><a href="#为什么要使用延时加载？" class="headerlink" title="为什么要使用延时加载？"></a>为什么要使用延时加载？</h2><p>假如一个网页中，含有大量的图片，当用户访问网页时，那么浏览器会发送n个图片的请求，加载速度会变得缓慢，性能也会下降。如果使用了延时加载，当用户访问页面的时候，只加载首屏中的图片；后续的图片只有在用户滚动时，即将要呈现给用户浏览时再按需加载，这样可以提高页面的加载速度，也提升了用户体验。而且，统一时间内更少的请求也减轻了服务器中的负担。</p>
<h2 id="延时加载的原理"><a href="#延时加载的原理" class="headerlink" title="延时加载的原理"></a>延时加载的原理</h2><p>基本原理就是最开始时，所有图片都先放一张占位图片（如灰色背景图），真实的图片地址则放在 <code>data-src</code> 中，这么一来，网页在打开时只会加载一张图片。</p>
<p>然后，再给 <code>window</code> 或 <code>body</code> 或者是图片主体内容绑定一个滚动监听事件，当图片出现在可视区域内，即<code>滚动距离 + 窗体可视距离 &gt; 图片到容器顶部的距离</code>时，将讲真实图片地址赋值给图片的 src，否则不加载。</p>
<h2 id="使用原生js实现图片的延时加载"><a href="#使用原生js实现图片的延时加载" class="headerlink" title="使用原生js实现图片的延时加载"></a>使用原生js实现图片的延时加载</h2><p>延时加载需要传入的参数：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> selector = options.selector || <span class="string">'img'</span>,</div><div class="line">    imgSrc = options.src || <span class="string">'data-src'</span>,</div><div class="line">    defaultSrc = options.defaultSrc || <span class="string">''</span>,</div><div class="line">    wrapper = options.wrap || body;</div></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li><code>wrapper</code> ：延时加载的容器。在该容器下，所有符合图片选择器条件的图片均会延时加载。</li>
<li><code>selector</code> ：图片选择器。表示需要延迟加载的图片的选择器，如 <code>img.lazyload-image</code> ，默认为所有的 img 标签。</li>
<li><code>imgSrc</code> ：图片真实地址存放属性。表示图片的真实路径存放在标签的哪个属性中，默认为 <code>data-src</code>。</li>
<li><code>defaultSrc</code> ：初始加载的图片地址，默认为空，当为空时，不处理延时加载的图片的路径，若图片本身没有路径，则显示为空。<br>获取容器中所有的图片。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAllImages</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], wrapper.querySelectorAll(selector));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该函数在容器中查找出所有需要延时加载的图片，并将 NodeList 类型的对象转换为允许使用 map 函数的数组。</p>
<p>如果设置了初始图片地址，则加载。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setDefault</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    images.map(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</div><div class="line">        img.src = defaultSrc;</div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>给 window 绑定滚动事件<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> nowHeight = body.scrollTop || doc.documentElement.scrollTop;</div><div class="line">    <span class="built_in">console</span>.log(nowHeight);</div><div class="line">    <span class="keyword">if</span> (images.length &gt; <span class="number">0</span>)&#123;</div><div class="line">        images.map(<span class="function"><span class="keyword">function</span>(<span class="params">img, index</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (nowHeight + winHeight &gt; img.offsetTop) &#123;</div><div class="line">                img.src = img.getAttribute(imgSrc);</div><div class="line">                images.splice(index, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="built_in">window</span>.onscroll = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">window</span>.onscroll = loadImage();</div></pre></td></tr></table></figure></p>
<p>每次滚动网页时，都会遍历所有的图片，将图片的位置与当前滚动位置作对比，当符合加载条件时，将图片的真实地址赋值给图片，并将图片从集合中移除；当所有需要延时加载的图片都加载完毕后，将滚动事件取消绑定。</p>
<h2 id="测试是否可行"><a href="#测试是否可行" class="headerlink" title="测试是否可行"></a>测试是否可行</h2><h3 id="测试结果："><a href="#测试结果：" class="headerlink" title="测试结果："></a>测试结果：</h3><p>从chrome的网络请求图中可见，5张图片并不是在网页打开的时候就请求了，而是当滑动到某个区域时才触发加载，基本实现了图片的延时加载。<br>测试结果</p>
<h3 id="性能调整"><a href="#性能调整" class="headerlink" title="性能调整"></a>性能调整</h3><p>上述只是简单的实现了一个延时加载的 demo，还有很多地方需要调整和完善。</p>
<h4 id="调整-1：onscroll-函数可能会被覆盖"><a href="#调整-1：onscroll-函数可能会被覆盖" class="headerlink" title="调整 1：onscroll 函数可能会被覆盖"></a>调整 1：onscroll 函数可能会被覆盖</h4><p><strong>问题：</strong></p>
<p>因为有时候页面需要滚动无限加载时，插件会重写 window 的 onscroll 函数，从而导致图片的延时加载滚动监听失效。</p>
<p><strong>解决办法：</strong></p>
<p>需要更改为将监听事件注册到 window 上，移除时只需要移除相应的事件即可。</p>
<p><strong>调整后的代码</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindListener</span>(<span class="params">element, type, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">        element.addEventListener(type, callback);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</div><div class="line">        <span class="comment">//兼容至 IE8</span></div><div class="line">        element.attachEvent(<span class="string">'on'</span>+type, callback)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        element[<span class="string">'on'</span>+type] = callback;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeListener</span>(<span class="params">element, type, callback</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (element.removeEventListener) &#123;</div><div class="line">        element.removeEventListener(type, callback);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</div><div class="line">        element.detachEvent(<span class="string">'on'</span>+type, callback)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        element[<span class="string">'on'</span>+type] = callback;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> nowHeight = body.scrollTop || doc.documentElement.scrollTop;</div><div class="line">    <span class="built_in">console</span>.log(nowHeight);</div><div class="line">    <span class="keyword">if</span> (images.length &gt; <span class="number">0</span>)&#123;</div><div class="line">        images.map(<span class="function"><span class="keyword">function</span>(<span class="params">img, index</span>) </span>&#123;</div><div class="line">            <span class="keyword">if</span> (nowHeight + winHeight &gt; img.offsetTop) &#123;</div><div class="line">                img.src = img.getAttribute(imgSrc);</div><div class="line">                images.splice(index, <span class="number">1</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        <span class="comment">//解绑滚动事件</span></div><div class="line">        removeListener(<span class="built_in">window</span>, <span class="string">'scroll'</span>, loadImage)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//绑定滚动事件</span></div><div class="line">bindListener(<span class="built_in">window</span>, <span class="string">'scroll'</span>, loadImage)</div></pre></td></tr></table></figure>
<h4 id="调整2：滚动时的回调函数执行次数太多"><a href="#调整2：滚动时的回调函数执行次数太多" class="headerlink" title="调整2：滚动时的回调函数执行次数太多"></a>调整2：滚动时的回调函数执行次数太多</h4><p><strong>问题</strong></p>
<p>在本次测试中，从动图最后可以看到，当滚动网页时，loadImage 函数执行了非常多次，滚轮每向下滚动 100px 基本上就要执行 10 次左右的 loadImage，若处理函数稍微复杂，响应速度跟不上触发频率，则会造成浏览器的卡顿甚至假死，影响用户体验。</p>
<p><strong>解决办法</strong></p>
<p>使用 <code>throttle</code> 控制触发频率，让浏览器有更多的时间间隔去执行相应操作，减少页面抖动。</p>
<p><strong>调整后的代码：</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//参考 `underscore` 的源码</span></div><div class="line"><span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> context, args, result;</div><div class="line">    <span class="keyword">var</span> timeout = <span class="literal">null</span>;</div><div class="line">    <span class="comment">// 上次执行时间点</span></div><div class="line">    <span class="keyword">var</span> previous = <span class="number">0</span>;</div><div class="line">    <span class="keyword">if</span> (!options) options = &#123;&#125;;</div><div class="line">    <span class="comment">// 延迟执行函数</span></div><div class="line">    <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="comment">// 若设定了开始边界不执行选项，上次执行时间始终为0</span></div><div class="line">        previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _now();</div><div class="line">        timeout = <span class="literal">null</span>;</div><div class="line">        result = func.apply(context, args);</div><div class="line">        <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> now = _now();</div><div class="line">        <span class="comment">// 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。</span></div><div class="line">        <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</div><div class="line">        <span class="comment">// 延迟执行时间间隔</span></div><div class="line">        <span class="keyword">var</span> remaining = wait - (now - previous);</div><div class="line">        context = <span class="keyword">this</span>;</div><div class="line">        args = <span class="built_in">arguments</span>;</div><div class="line">        <span class="comment">// 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口</span></div><div class="line">        <span class="comment">// remaining大于时间窗口wait，表示客户端系统时间被调整过</span></div><div class="line">        <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</div><div class="line">            clearTimeout(timeout);</div><div class="line">            timeout = <span class="literal">null</span>;</div><div class="line">            previous = now;</div><div class="line">            result = func.apply(context, args);</div><div class="line">            <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</div><div class="line">            <span class="comment">//如果延迟执行不存在，且没有设定结尾边界不执行选项</span></div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</div><div class="line">            timeout = setTimeout(later, remaining);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;;</div><div class="line">&#125;;</div><div class="line"><span class="comment">//在调用高频率触发函数处使用 throttle 控制频率在 次/wait</span></div><div class="line"><span class="keyword">var</span> load = throttle(loadImage, <span class="number">250</span>);</div><div class="line"><span class="comment">//绑定滚动事件</span></div><div class="line">bindListener(<span class="built_in">window</span>, <span class="string">'scroll'</span>, load);</div><div class="line"><span class="comment">//解绑滚动事件</span></div><div class="line">removeListener(<span class="built_in">window</span>, <span class="string">'scroll'</span>, load)</div></pre></td></tr></table></figure></p>
<h3 id="调整后的测试"><a href="#调整后的测试" class="headerlink" title="调整后的测试"></a>调整后的测试</h3><p>从动图可见，在滚动的时候，调用判断的回调的次数少了很多。而且也不影响图片的延时加载。</p>
<p>调整后的测试结果</p>
<p>封装为插件形式<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div></pre></td><td class="code"><pre><div class="line">;(<span class="function"><span class="keyword">function</span>(<span class="params">window, undefined</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">_now</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//辅助函数</span></div><div class="line">    <span class="keyword">var</span> throttle = <span class="function"><span class="keyword">function</span>(<span class="params">func, wait, options</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> context, args, result;</div><div class="line">        <span class="keyword">var</span> timeout = <span class="literal">null</span>;</div><div class="line">        <span class="comment">// 上次执行时间点</span></div><div class="line">        <span class="keyword">var</span> previous = <span class="number">0</span>;</div><div class="line">        <span class="keyword">if</span> (!options) options = &#123;&#125;;</div><div class="line">        <span class="comment">// 延迟执行函数</span></div><div class="line">        <span class="keyword">var</span> later = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="comment">// 若设定了开始边界不执行选项，上次执行时间始终为0</span></div><div class="line">            previous = options.leading === <span class="literal">false</span> ? <span class="number">0</span> : _now();</div><div class="line">            timeout = <span class="literal">null</span>;</div><div class="line">            result = func.apply(context, args);</div><div class="line">            <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</div><div class="line">        &#125;;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> now = _now();</div><div class="line">            <span class="comment">// 首次执行时，如果设定了开始边界不执行选项，将上次执行时间设定为当前时间。</span></div><div class="line">            <span class="keyword">if</span> (!previous &amp;&amp; options.leading === <span class="literal">false</span>) previous = now;</div><div class="line">            <span class="comment">// 延迟执行时间间隔</span></div><div class="line">            <span class="keyword">var</span> remaining = wait - (now - previous);</div><div class="line">            context = <span class="keyword">this</span>;</div><div class="line">            args = <span class="built_in">arguments</span>;</div><div class="line">            <span class="comment">// 延迟时间间隔remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间窗口</span></div><div class="line">            <span class="comment">// remaining大于时间窗口wait，表示客户端系统时间被调整过</span></div><div class="line">            <span class="keyword">if</span> (remaining &lt;= <span class="number">0</span> || remaining &gt; wait) &#123;</div><div class="line">                clearTimeout(timeout);</div><div class="line">                timeout = <span class="literal">null</span>;</div><div class="line">                previous = now;</div><div class="line">                result = func.apply(context, args);</div><div class="line">                <span class="keyword">if</span> (!timeout) context = args = <span class="literal">null</span>;</div><div class="line">                <span class="comment">//如果延迟执行不存在，且没有设定结尾边界不执行选项</span></div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout &amp;&amp; options.trailing !== <span class="literal">false</span>) &#123;</div><div class="line">                timeout = setTimeout(later, remaining);</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="comment">//分析参数</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">custom, src</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> result = &#123;&#125;;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> attr <span class="keyword">in</span> src)&#123;</div><div class="line">            result[attr] = custom[attr] || src[attr]</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> result;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//绑定事件，兼容处理</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bindListener</span>(<span class="params">element, type, callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (element.addEventListener) &#123;</div><div class="line">            element.addEventListener(type, callback);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (element.attachEvent) &#123;</div><div class="line">            element.attachEvent(<span class="string">'on'</span>+type, callback)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            element[<span class="string">'on'</span>+type] = callback;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//解绑事件，兼容处理</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">removeListener</span>(<span class="params">element, type, callback</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (element.removeEventListener) &#123;</div><div class="line">            element.removeEventListener(type, callback);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (element.detachEvent) &#123;</div><div class="line">            element.detachEvent(<span class="string">'on'</span>+type, callback)</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            element[<span class="string">'on'</span>+type] = <span class="literal">null</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//判断一个元素是否为DOM对象，兼容处理</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">isElement</span>(<span class="params">o</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(o &amp;&amp; (<span class="keyword">typeof</span> HTMLElement===<span class="string">"function"</span> || <span class="keyword">typeof</span> HTMLElement===<span class="string">"object"</span>) &amp;&amp; o <span class="keyword">instanceof</span> HTMLElement)&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            <span class="keyword">return</span> (o &amp;&amp; o.nodeType &amp;&amp; o.nodeType===<span class="number">1</span>) ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">        &#125;;</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">var</span> lazyload = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>)</span>&#123;</div><div class="line">        <span class="comment">//辅助变量</span></div><div class="line">        <span class="keyword">var</span> images = [],</div><div class="line">            doc = <span class="built_in">document</span>,</div><div class="line">            body = <span class="built_in">document</span>.body,</div><div class="line">            winHeight = screen.availHeight;</div><div class="line">        <span class="comment">//参数配置</span></div><div class="line">        <span class="keyword">var</span> opt = extend(options, &#123;</div><div class="line">            <span class="attr">wrapper</span>: body,</div><div class="line">            <span class="attr">selector</span>: <span class="string">'img'</span>,</div><div class="line">            <span class="attr">imgSrc</span>: <span class="string">'data-src'</span>,</div><div class="line">            <span class="attr">defaultSrc</span>: <span class="string">''</span></div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">if</span> (!isElement(opt.wrapper)) &#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'not an HTMLElement'</span>);</div><div class="line">            <span class="keyword">if</span>(<span class="keyword">typeof</span> opt.wrapper != <span class="string">'string'</span>)&#123;</div><div class="line">                <span class="comment">//若 wrapper 不是DOM对象 或者不是字符串，报错</span></div><div class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'wrapper should be an HTMLElement or a selector string'</span>);</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                <span class="comment">//选择器</span></div><div class="line">                opt.wrapper = doc.querySelector(opt.wrapper) || body;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//查找所有需要延时加载的图片</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">getAllImages</span>(<span class="params">selector</span>)</span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">Array</span>.prototype.concat.apply([], opt.wrapper.querySelectorAll(selector));</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//设置默认显示图片</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">setDefault</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            images.map(<span class="function"><span class="keyword">function</span>(<span class="params">img</span>)</span>&#123;</div><div class="line">                img.src = opt.defaultSrc;</div><div class="line">            &#125;)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//加载图片</span></div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> nowHeight = body.scrollTop || doc.documentElement.scrollTop;</div><div class="line">            <span class="built_in">console</span>.log(nowHeight);</div><div class="line">            <span class="keyword">if</span> (images.length &gt; <span class="number">0</span>)&#123;</div><div class="line">                images.map(<span class="function"><span class="keyword">function</span>(<span class="params">img, index</span>) </span>&#123;</div><div class="line">                    <span class="keyword">if</span> (nowHeight + winHeight &gt; img.offsetTop) &#123;</div><div class="line">                        img.src = img.getAttribute(opt.imgSrc);</div><div class="line">                        <span class="built_in">console</span>.log(<span class="string">'loaded'</span>);</div><div class="line">                        images.splice(index, <span class="number">1</span>);</div><div class="line">                    &#125;</div><div class="line">                &#125;)</div><div class="line">            &#125;<span class="keyword">else</span>&#123;</div><div class="line">                removeListener(<span class="built_in">window</span>, <span class="string">'scroll'</span>, load)</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">var</span> load = throttle(loadImage, <span class="number">250</span>);</div><div class="line">        <span class="keyword">return</span> (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">            images = getAllImages(opt.selector);</div><div class="line">            bindListener(<span class="built_in">window</span>, <span class="string">'scroll'</span>, load);</div><div class="line">            opt.defaultSrc &amp;&amp; setDefault()</div><div class="line">            loadImage();</div><div class="line">        &#125;)()</div><div class="line">    &#125;;</div><div class="line">    <span class="built_in">window</span>.lazyload = lazyload;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure></p>
<p>上述代码拷贝到项目中即可使用，使用方式：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//使用默认参数</span></div><div class="line"><span class="keyword">new</span> lazyload();</div><div class="line"><span class="comment">//使用自定义参数</span></div><div class="line"><span class="keyword">new</span> lazyload(&#123;</div><div class="line">    <span class="attr">wrapper</span>: <span class="string">'.article-content'</span>,</div><div class="line">    <span class="attr">selector</span>: <span class="string">'.image'</span>,</div><div class="line">    <span class="attr">src</span>: <span class="string">'data-image'</span>,</div><div class="line">    <span class="attr">defaultSrc</span>: <span class="string">'example.com/static/images/default.png'</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>若在 IE8 中使用，没有 map 函数时，请在引用插件前加入下列处理 map 函数兼容性的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 实现 ECMA-262, Edition 5, 15.4.4.19</span></div><div class="line"><span class="comment">// 参考: http://es5.github.com/#x15.4.4.19</span></div><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.map) &#123;</div><div class="line">    <span class="built_in">Array</span>.prototype.map = <span class="function"><span class="keyword">function</span>(<span class="params">callback, thisArg</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> T, A, k;</div><div class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == <span class="literal">null</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">" this is null or not defined"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 1. 将O赋值为调用map方法的数组.</span></div><div class="line">        <span class="keyword">var</span> O = <span class="built_in">Object</span>(<span class="keyword">this</span>);</div><div class="line">        <span class="comment">// 2.将len赋值为数组O的长度.</span></div><div class="line">        <span class="keyword">var</span> len = O.length &gt;&gt;&gt; <span class="number">0</span>;</div><div class="line">        <span class="comment">// 3.如果callback不是函数,则抛出TypeError异常.</span></div><div class="line">        <span class="keyword">if</span> (<span class="built_in">Object</span>.prototype.toString.call(callback) != <span class="string">"[object Function]"</span>) &#123;</div><div class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(callback + <span class="string">" is not a function"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 4. 如果参数thisArg有值,则将T赋值为thisArg;否则T为undefined.</span></div><div class="line">        <span class="keyword">if</span> (thisArg) &#123;</div><div class="line">            T = thisArg;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 5. 创建新数组A,长度为原数组O长度len</span></div><div class="line">        A = <span class="keyword">new</span> <span class="built_in">Array</span>(len);</div><div class="line">        <span class="comment">// 6. 将k赋值为0</span></div><div class="line">        k = <span class="number">0</span>;</div><div class="line">        <span class="comment">// 7. 当 k &lt; len 时,执行循环.</span></div><div class="line">        <span class="keyword">while</span> (k &lt; len) &#123;</div><div class="line">            <span class="keyword">var</span> kValue, mappedValue;</div><div class="line">            <span class="comment">//遍历O,k为原数组索引</span></div><div class="line">            <span class="keyword">if</span> (k <span class="keyword">in</span> O) &#123;</div><div class="line">                <span class="comment">//kValue为索引k对应的值.</span></div><div class="line">                kValue = O[k];</div><div class="line">                <span class="comment">// 执行callback,this指向T,参数有三个.分别是kValue:值,k:索引,O:原数组.</span></div><div class="line">                mappedValue = callback.call(T, kValue, k, O);</div><div class="line">                <span class="comment">// 返回值添加到新数组A中.</span></div><div class="line">                A[k] = mappedValue;</div><div class="line">            &#125;</div><div class="line">            <span class="comment">// k自增1</span></div><div class="line">            k++;</div><div class="line">        &#125;</div><div class="line">        <span class="comment">// 8. 返回新数组A</span></div><div class="line">        <span class="keyword">return</span> A;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Enjoy!!!</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Without jQuery 系列之：lazyload.js&lt;/p&gt;
&lt;p&gt;使用原生的js实现简易的图片延时加载。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.leungjz.top/tags/javascript/"/>
    
      <category term="no-jquery" scheme="http://blog.leungjz.top/tags/no-jquery/"/>
    
      <category term="lazyloadw" scheme="http://blog.leungjz.top/tags/lazyloadw/"/>
    
  </entry>
  
  <entry>
    <title>使用 restify 搭建 RESTful API</title>
    <link href="http://blog.leungjz.top/2016/08/03/restify-demo/"/>
    <id>http://blog.leungjz.top/2016/08/03/restify-demo/</id>
    <published>2016-08-03T07:40:12.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>使用 restify 框架搭建一个简易的 REST Web 服务。<br><a id="more"></a></p>
<h2 id="什么是-RESTful-架构？"><a href="#什么是-RESTful-架构？" class="headerlink" title="什么是 RESTful 架构？"></a>什么是 RESTful 架构？</h2><blockquote>
<p>具象状态传输（英文：Representational State Transfer，简称REST）是Roy Thomas Fielding博士于2000年在他的博士论文 “Architectural Styles and the Design of Network-based Software Architectures” 中提出来的一种万维网软件架构风格。</p>
<p>目前在三种主流的Web服务实现方案中，因为REST模式与复杂的SOAP和XML-RPC相比更加简洁，越来越多的web服务开始采用REST风格设计和实现。例如，Amazon.com提供接近REST风格的Web服务执行图书查询；雅虎提供的Web服务也是REST风格的。</p>
</blockquote>
<p>具体可以阅读 阮一峰 的日志 RESTful API 设计指南 ，或是参考 维基百科</p>
<h2 id="什么是-restify-框架？"><a href="#什么是-restify-框架？" class="headerlink" title="什么是 restify 框架？"></a>什么是 restify 框架？</h2><blockquote>
<p>restify is a node.js module built specifically to enable you to build correct REST web services. It intentionally borrows heavily from express as that is more or less the de facto API for writing web applications on top of node.js.</p>
<p>restify 是专门帮助你建立正确的 REST Web 服务的 Node.js 模块，它有意地大量借鉴了Express。</p>
</blockquote>
<h2 id="安装使用-restify"><a href="#安装使用-restify" class="headerlink" title="安装使用 restify"></a>安装使用 restify</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p><code>$ npm install restify</code></p>
<h3 id="编写基于-REST-的-API"><a href="#编写基于-REST-的-API" class="headerlink" title="编写基于 REST 的 API"></a>编写基于 REST 的 API</h3><ol>
<li><p>新建一个 <code>app.js</code> 文件<br><code>$ touch app.js</code></p>
</li>
<li><p>引入 <code>restify</code> 模块</p>
<p><code>var restify = require(&#39;restify&#39;);</code></p>
</li>
<li><p>配置 <code>restify</code> 的插件</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">server.use(restify.acceptParser(server.acceptable));</div><div class="line">server.use(restify.queryParser());</div><div class="line">server.use(restify.bodyParser());</div></pre></td></tr></table></figure>
<ul>
<li><p>Accept Parser</p>
<blockquote>
<p>Parses out the Accept header, and ensures that the server can respond to what the client asked for. You almost always want to just pass in server.acceptable here, as that’s an array of content types the server knows how to respond to (with the formatters you’ve registered). If the request is for a non-handled type, this plugin will return an error of 406.</p>
<p>解析 Accept 头部，确保服务器可以响应客户端的请求。一般来说，你只需要传递 server.acceptable ，这是一个包含所有服务器知道如何响应的内容类型的数组。如果请求一个未知类型，该插件会返回一个 406 错误。</p>
</blockquote>
</li>
<li><p>QueryParser</p>
<blockquote>
<p>Parses the HTTP query string (i.e., /foo?id=bar&amp;name=mark). If you use this, the parsed content will always be available in req.query, additionally params are merged into req.params. You can disable by passing in mapParams: false in the options object:</p>
<p>解析 HTTP 传递的查询字符串（如，/foo?id=bar&amp;name=mark ）如果你使用这个插件，被处理的内容可以通过 req.query 访问，同时参数会被合并到 req.params 中。你可以通过传递参数对象 {mapParams: false} 来禁用它。</p>
</blockquote>
<p>  当不传入参数时，请求返回的数据如图：<br>  <img src="restify-demo/1-1.png" alt="无参数情况"><br>  当传入参数 <code>{mapParams: false}</code> 时，请求返回的数据如图，可以发现，params 中已经不再带有参数：<br>  <img src="restify-demo/1.png" alt="有参数情况"></p>
</li>
<li><p>BodyParser</p>
<blockquote>
<p>Blocks your chain on reading and parsing the HTTP request body. Switches on <code>Content-Type</code> and does the appropriate logic. <code>application/json</code>, <code>application/x-www-form-urlencoded</code> and <code>multipart/form-data</code> are currently supported.</p>
<p>在读取和解析 HTTP 请求 body 的时候，改变 <code>Content-Type</code> 并执行相应的逻辑。支持 <code>application/json</code>, <code>application/x-www-form-urlencoded</code> 和 <code>multipart/form-data</code> 类型。</p>
</blockquote>
<p>  Options:</p>
<ul>
<li><code>maxBodySize</code> - The maximum size in bytes allowed in the HTTP body. Useful for limiting clients from hogging server memory.</li>
<li><code>mapParams</code> - if <code>req.params</code> should be filled with parsed parameters from HTTP body.</li>
<li><code>mapFiles</code> - if <code>req.params</code> should be filled with the contents of files sent through a multipart request. formidable is used internally for parsing, and a file is denoted as a multipart part with the <code>filename</code> option set in its <code>Content-Disposition</code>. This will only be performed if <code>mapParams</code> is true.</li>
<li><code>overrideParams</code> - if an entry in <code>req.params</code> should be overwritten by the value in the body if the names are the same. For instance, if you have the route <code>/:someval</code>, and someone posts an <code>x-www-form-urlencoded</code> Content-Type with the body <code>someval=happy</code> to <code>/sad</code>, the value will be <code>happy</code> if <code>overrideParams</code> is <code>true</code>, <code>sad</code> otherwise.</li>
<li><code>multipartHandler</code> - a callback to handle any multipart part which is not a file. If this is omitted, the default handler is invoked which may or may not map the parts into <code>req.params</code>, depending on the <code>mapParams</code>-option.</li>
<li><code>multipartFileHandler</code> - a callback to handle any multipart file. It will be a file if the part have a <code>Content-Disposition</code> with the <code>filename</code> parameter set. This typically happens when a browser sends a from and there is a parameter similar to <code>&lt;input type=&quot;file&quot; /&gt;</code>. If this is not provided, the default behaviour is to map the contents into <code>req.params</code>.</li>
<li><code>keepExtensions</code> - if you want the uploaded files to include the extensions of the original files (multipart uploads only). Does nothing if <code>multipartFileHandler</code> is defined.</li>
<li><code>uploadDir</code> - Where uploaded files are intermediately stored during transfer before the contents is mapped into <code>req.params</code>. Does nothing if <code>multipartFileHandler</code> is defined.</li>
<li><code>multiples</code> - if you want to support html5 multiple attribute in upload fields.</li>
<li><code>hash</code> - If you want checksums calculated for incoming files, set this to either <code>sha1</code> or <code>md5</code>.</li>
</ul>
</li>
</ul>
</li>
<li><p>编写 CRUD API<br><strong>此处的 CRUD 仅作为演示使用，并不具备任何数据库操作功能</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//获取所有信息</span></div><div class="line">server.get(<span class="string">'/person'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.send(&#123;<span class="attr">message</span>: <span class="string">'Hello ,from GET!'</span>, <span class="attr">data</span>: <span class="string">'All person'</span>&#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Get request from '</span>+req.method);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//获取某个person的信息</span></div><div class="line">server.get(<span class="string">'/person/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.send(&#123;<span class="attr">message</span>: <span class="string">'Hello ,from GET!'</span>, <span class="attr">data</span>: &#123;<span class="attr">id</span>: req.params.id&#125;&#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Get request from '</span>+req.method+<span class="string">', request id is '</span>+req.params.id);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//修改person信息</span></div><div class="line">server.put(<span class="string">'/person/:id'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.send(&#123;<span class="attr">message</span>: <span class="string">'Hello ,from PUT!'</span>, <span class="attr">data</span>: &#123;<span class="attr">info</span>: req.params, <span class="attr">id</span>: req.params.id&#125;&#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Get request from '</span>+req.method+<span class="string">', request id is '</span>+req.params.id);</div><div class="line">&#125;)</div><div class="line"><span class="comment">//新增person</span></div><div class="line">server.post(<span class="string">'/person'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>)</span>&#123;</div><div class="line">    res.send(&#123;<span class="attr">message</span>: <span class="string">'Hello ,from post!'</span>, <span class="attr">data</span>: &#123;<span class="attr">id</span>: id++, <span class="attr">info</span>: req.params&#125;&#125;);</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Get request from '</span>+req.method+<span class="string">', new Person\'s info is :'</span>+<span class="built_in">JSON</span>.stringify(req.params));</div><div class="line">    <span class="comment">// console.log(req);</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
<li><p>简易测试 API 是否可用</p>
<p>测试用的工具是 <code>postman</code> ，具体介绍可以移步至 <a href="https://www.getpostman.com/" target="_blank" rel="external">官网</a></p>
<ul>
<li>测试 <code>get</code> 请求（不带参数 id）<br>  <img src="restify-demo/get.png" alt="get 请求不带 id"></li>
<li>测试 <code>get</code> 请求（带参数 id = 2）<br>  <img src="restify-demo/get-2.png" alt="带参数 id = 2"></li>
<li>测试 <code>put</code> 请求<br>  <img src="restify-demo/put.png" alt="带参数 id = 2"></li>
<li>测试 <code>post</code> 请求<br>  <img src="restify-demo/post.png" alt="带参数 id = 2"></li>
</ul>
</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 restify 框架搭建一个简易的 REST Web 服务。&lt;br&gt;
    
    </summary>
    
    
      <category term="nodejs" scheme="http://blog.leungjz.top/tags/nodejs/"/>
    
      <category term="javascript" scheme="http://blog.leungjz.top/tags/javascript/"/>
    
      <category term="restify" scheme="http://blog.leungjz.top/tags/restify/"/>
    
  </entry>
  
  <entry>
    <title>Without jQuery:event.js</title>
    <link href="http://blog.leungjz.top/2016/07/23/without-jquery-event-js/"/>
    <id>http://blog.leungjz.top/2016/07/23/without-jquery-event-js/</id>
    <published>2016-07-23T07:30:03.000Z</published>
    <updated>2017-06-29T12:45:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>Without jQuery 系列之：event.js</p>
<p>使用原生的js实现简易的事件委托。<br><a id="more"></a></p>
<h2 id="什么是事件委托"><a href="#什么是事件委托" class="headerlink" title="什么是事件委托"></a>什么是事件委托</h2><blockquote>
<p>什么是事件委托：通俗的讲，事件就是onclick，onmouseover，onmouseout，等就是事件，委托呢，就是让别人来做，这个事件本来是加在某些元素上的，然而你却加到别人身上来做，完成这个事件。</p>
</blockquote>
<h2 id="事件委托的原理"><a href="#事件委托的原理" class="headerlink" title="事件委托的原理"></a>事件委托的原理</h2><blockquote>
<p>利用冒泡的原理，把事件加到父级上，触发执行效果。</p>
</blockquote>
<h2 id="为什么要使用事件委托"><a href="#为什么要使用事件委托" class="headerlink" title="为什么要使用事件委托"></a>为什么要使用事件委托</h2><p>比如，现在有一个列表，需要有这么一个交互：点击列表中每一项，都在控制台打印出该项的文字。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span> Item 1 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span> Item 2 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span> Item 3 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span> Item 4 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span> Item 5 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span> Item 6 <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如过不使用事件委托，那么每一项的点击事件都要这么写：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = list.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</div><div class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">index</span>)</span>&#123;</div><div class="line">        list[index].addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">            ev.preventDefault();</div><div class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.innerText);</div><div class="line">        &#125;)</div><div class="line">    &#125;)(i)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这么写有两个大问题：</p>
<ol>
<li>效率太低下，需要给每一个li都绑定一个事件，如果有100个li，那么会消耗大量的时间和内存。</li>
<li>对动态的元素不友好：每个新添加的元素都需要独立绑定一次事件，又带来新的效率问题。</li>
</ol>
<p>但是，使用事件委托的话，这两个问题就迎刃而解了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">list.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">    ev.preventDefault();</div><div class="line">    <span class="keyword">var</span> target = ev.target;</div><div class="line">    <span class="keyword">if</span> (target.tagName.toLowercase() == <span class="string">'li'</span>) &#123;</div><div class="line">        <span class="built_in">console</span>.log(target.innerText);</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="怎么使用事件委托？"><a href="#怎么使用事件委托？" class="headerlink" title="怎么使用事件委托？"></a>怎么使用事件委托？</h2><ol>
<li>在原生的js中，事件委托可以写成上述那样，每次执行的时候都判断该元素是否是目标元素。</li>
<li>使用jquery的on函数：<code>$(element).on(type, selector, data, func)</code></li>
</ol>
<h2 id="为什么要自己写一个而不是用jquery？"><a href="#为什么要自己写一个而不是用jquery？" class="headerlink" title="为什么要自己写一个而不是用jquery？"></a>为什么要自己写一个而不是用jquery？</h2><p>有时候在写一些小网站，交互并不多，使用jquery的地方很少很少，而且，现在的现代浏览器对DOM的操作已经很方便了，jquery有时就显得过于臃肿，为了使用一两个简单的功能而引入jquery，是得不偿失的。</p>
<p>所以，那就自己手动写一个和jquery的on函数类似的吧。</p>
<p>jquery的on函数可以实现两个最基本的功能：</p>
<ol>
<li>给元素绑定相应的事件：$(element).on(type, func)</li>
<li>给元素中的子元素绑定事件，委托至父元素，让父元素执行：<code>$(element).on(type, selector, func)</code><br>首先是第一个需求，给元素绑定相应的事件：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">el, type, func</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (el.addEventListener) &#123;</div><div class="line">        el.addEventListener(type, func, <span class="literal">false</span>);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (el.attachEvent) &#123;</div><div class="line">        el.attachEvent(type, func);</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        el[<span class="string">'on'</span>+type] = func;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>就这样可以给一个元素el绑定相应的事件了。</p>
<p>再来就是委托。在这里，采用了最古老的方法，先在父元素中，能否查找到相应的子元素，若找到，则用子元素和点击事件的目标元素做对比；若在父元素中能找到目标元素，则执行相应的操作。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">delegateEvent</span>(<span class="params">el, type, selector, func</span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> agent = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">        <span class="keyword">var</span> targets = el.querySelectorAll(selector);</div><div class="line">        <span class="keyword">var</span> matchTarget = <span class="literal">null</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; targets.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (target === targets[i] || targets[i].contains(target)) &#123;</div><div class="line">                matchTarget = target;</div><div class="line">                <span class="keyword">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        matchTarget &amp;&amp; func.call(matchTarget, ev);</div><div class="line">    &#125;</div><div class="line">    bindEvent(el, type, agent);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ok，一个简易的事件委托的框架大体完成了，接下来就是要合并一下，合并成我们常用的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">Element.prototype._on = <span class="function"><span class="keyword">function</span>(<span class="params">type, selector, func</span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (selector &amp;&amp; func == <span class="literal">undefined</span>) &#123;</div><div class="line">        func = selector;</div><div class="line">        selector = <span class="literal">null</span>;</div><div class="line">        bindEvent(<span class="keyword">this</span>, type, func);</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'on'</span>);</div><div class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (selector == <span class="literal">undefined</span> &amp;&amp; func == <span class="literal">undefined</span>) &#123;</div><div class="line">        bindEvent(<span class="keyword">this</span>, type, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;ev.preventDetault()&#125;)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'null'</span>);</div><div class="line">    &#125; <span class="keyword">else</span>&#123;</div><div class="line">        delegateEvent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'delegate'</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>该_on方法，接受3个参数：<code>type</code>(事件类型), <code>selector</code>(指定触发事件的元素), <code>func</code>(触发的事件)。</p>
<p>使用方法如<code>document.body._on(&#39;click&#39;, &#39;a&#39;, function(){console.log(this)})</code>，给body绑定一个点击事件，当点击a标签后，打印出该标签在控制台上。</p>
<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>最近已经越来越少写jq的，网站交互少是一个方面，使用了angular也是另一个方面。</p>
<p>完整的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params">window,undefined</span>)</span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">bindEvent</span>(<span class="params">el, type, func</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (el.addEventListener) &#123;</div><div class="line">            el.addEventListener(type, func, <span class="literal">false</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (el.attachEvent) &#123;</div><div class="line">            el.attachEvent(type, func);</div><div class="line">        &#125;<span class="keyword">else</span>&#123;</div><div class="line">            el[<span class="string">'on'</span>+type] = func;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">delegateEvent</span>(<span class="params">type, selector, func</span>)</span>&#123;</div><div class="line">        <span class="keyword">var</span> agent = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;</div><div class="line">            <span class="keyword">var</span> target = ev.target || ev.srcElement;</div><div class="line">            <span class="keyword">var</span> targets = <span class="keyword">this</span>.querySelectorAll(selector);</div><div class="line">            <span class="comment">// console.log(targets);</span></div><div class="line">            <span class="keyword">var</span> matchTarget = <span class="literal">null</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; targets.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (target === targets[i] || targets[i].contains(target)) &#123;</div><div class="line">                    matchTarget = target;</div><div class="line">                    <span class="keyword">break</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            matchTarget &amp;&amp; func.call(matchTarget, ev);</div><div class="line">        &#125;</div><div class="line">        bindEvent(<span class="keyword">this</span>, type, agent);</div><div class="line">    &#125;</div><div class="line">    Element.prototype._on = <span class="function"><span class="keyword">function</span>(<span class="params">type, selector, func</span>)</span>&#123;</div><div class="line">        <span class="keyword">if</span> (selector &amp;&amp; func == <span class="literal">undefined</span>) &#123;</div><div class="line">            func = selector;</div><div class="line">            selector = <span class="literal">null</span>;</div><div class="line">            bindEvent(<span class="keyword">this</span>, type, func);</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'on'</span>);</div><div class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (selector == <span class="literal">undefined</span> &amp;&amp; func == <span class="literal">undefined</span>) &#123;</div><div class="line">            bindEvent(<span class="keyword">this</span>, type, <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>)</span>&#123;ev.preventDetault()&#125;)</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'null'</span>);</div><div class="line">        &#125; <span class="keyword">else</span>&#123;</div><div class="line">            delegateEvent.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>)</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'delegate'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;)(<span class="built_in">window</span>);</div></pre></td></tr></table></figure></p>
<p>第一次写这种封装的小东西，如果有什么地方不妥的，尽情吐槽。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Without jQuery 系列之：event.js&lt;/p&gt;
&lt;p&gt;使用原生的js实现简易的事件委托。&lt;br&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="http://blog.leungjz.top/tags/javascript/"/>
    
      <category term="without-jquery" scheme="http://blog.leungjz.top/tags/without-jquery/"/>
    
  </entry>
  
</feed>
